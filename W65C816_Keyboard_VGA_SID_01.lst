  Thu Feb  4 2016 18:05                                                Page 1

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    

                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ; File: W65C816_Keyboard_VGA_SID_01.asm
     2                        ; 12/26/2015
     3                        
     4                        ;############################# DESCIPTION ########
                    ################
     5                        
     6                        ; This poject will add a couple of W65C22 VIAs to 
                    read a
     7                        ; Commodore 64 keyboard and interface with a prope
                    ller for VGA and SID emulation.
     8                        
     9                        ; So far I have hooked up the first extra VIA and 
                    mapped it to $7F00.
    10                        ;
    11                        
    12                        ;#################################################
                    ################
    13                        
    14                        	PW 80          ;Page Width (# of char/line)
    15                        	PL 60          ;Page Length for HP Laser
    16                        	INCLIST ON     ;Add Include files in Listing
    17                        
    18                        ;*********************************************
    19                        ;Test for Valid Processor defined in -D option
    20                        ;*********************************************
    21                        	IF USING_816
    22                        	ELSE
    23                        		EXIT  "Not Valid Processor: Use -DUSING_
                    02, etc."
    24                        	ENDIF
    25                        
    26                        	TITLE  "W65C816_Keyboard_VGA_SID W65C816_Keyboar
                    d_VGA_SID_01.asm"
    27                        	STTL
    28                        
    29                        ;########################### I/O addreses ########
                    #############
    30                        	
    31             00007F00   VIA_KEY_BASE	EQU $7F00		; base a
                    ddress of extra VIA on SXB used for the Keyboard
    32             00007F00   VIA_KEY_ORB		EQU VIA_KEY_BASE
    33             00007F00   VIA_KEY_IRB		EQU VIA_KEY_BASE
    34             00007F01   VIA_KEY_ORA		EQU VIA_KEY_BASE+1
    35             00007F01   VIA_KEY_IRA		EQU VIA_KEY_BASE+1
    36             00007F02   VIA_KEY_DDRB	EQU VIA_KEY_BASE+2
    37             00007F03   VIA_KEY_DDRA	EQU VIA_KEY_BASE+3
    38             00007F04   VIA_KEY_T1CLO	EQU VIA_KEY_BASE+4
    39             00007F05   VIA_KEY_T1CHI	EQU VIA_KEY_BASE+5
    40             00007F06   VIA_KEY_T1LLO	EQU VIA_KEY_BASE+6
  Thu Feb  4 2016 18:05                                                Page 2

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    

    41             00007F07   VIA_KEY_T1LHI	EQU VIA_KEY_BASE+7
    42             00007F08   VIA_KEY_T2CLO	EQU VIA_KEY_BASE+8
    43             00007F09   VIA_KEY_T2CHI	EQU VIA_KEY_BASE+9
    44             00007F0A   VIA_KEY_SR		EQU VIA_KEY_BASE+10
    45             00007F0B   VIA_KEY_ACR		EQU VIA_KEY_BASE+11
    46             00007F0C   VIA_KEY_PCR		EQU VIA_KEY_BASE+12
    47             00007F0D   VIA_KEY_IFR		EQU VIA_KEY_BASE+13
    48             00007F0E   VIA_KEY_IER		EQU VIA_KEY_BASE+14
    49             00007F0F   VIA_KEY_ORANH	EQU VIA_KEY_BASE+15
    50             00007F0F   VIA_KEY_IRANH	EQU VIA_KEY_BASE+15
    51                        
    52             00007F20   VIA_PROP_BASE	EQU $7F20		; base a
                    ddress of extra VIA on SXB used for the Propeller
    53             00007F20   VIA_PROP_ORB	EQU VIA_PROP_BASE
    54             00007F20   VIA_PROP_IRB	EQU VIA_PROP_BASE
    55             00007F21   VIA_PROP_ORA	EQU VIA_PROP_BASE+1
    56             00007F21   VIA_PROP_IRA	EQU VIA_PROP_BASE+1
    57             00007F22   VIA_PROP_DDRB	EQU VIA_PROP_BASE+2
    58             00007F23   VIA_PROP_DDRA	EQU VIA_PROP_BASE+3
    59             00007F24   VIA_PROP_T1CLO	EQU VIA_PROP_BASE+4
    60             00007F25   VIA_PROP_T1CHI	EQU VIA_PROP_BASE+5
    61             00007F26   VIA_PROP_T1LLO	EQU VIA_PROP_BASE+6
    62             00007F27   VIA_PROP_T1LHI	EQU VIA_PROP_BASE+7
    63             00007F28   VIA_PROP_T2CLO	EQU VIA_PROP_BASE+8
    64             00007F29   VIA_PROP_T2CHI	EQU VIA_PROP_BASE+9
    65             00007F2A   VIA_PROP_SR		EQU VIA_PROP_BASE+10
    66             00007F2B   VIA_PROP_ACR	EQU VIA_PROP_BASE+11
    67             00007F2C   VIA_PROP_PCR	EQU VIA_PROP_BASE+12
    68             00007F2D   VIA_PROP_IFR	EQU VIA_PROP_BASE+13
    69             00007F2E   VIA_PROP_IER	EQU VIA_PROP_BASE+14
    70             00007F2F   VIA_PROP_ORANH	EQU VIA_PROP_BASE+15
    71             00007F2F   VIA_PROP_IRANH	EQU VIA_PROP_BASE+15
    72                        
    73             00007FC0   VIA_BASE		EQU $7FC0		; base a
                    ddress of VIA port on SXB
    74             00007FC0   VIA_ORB			EQU VIA_BASE
    75             00007FC0   VIA_IRB			EQU VIA_BASE
    76             00007FC1   VIA_ORA			EQU VIA_BASE+1
    77             00007FC1   VIA_IRA			EQU VIA_BASE+1
    78             00007FC2   VIA_DDRB		EQU VIA_BASE+2
    79             00007FC3   VIA_DDRA		EQU VIA_BASE+3
    80             00007FC4   VIA_T1CLO		EQU VIA_BASE+4
    81             00007FC5   VIA_T1CHI		EQU VIA_BASE+5
    82             00007FC6   VIA_T1LLO		EQU VIA_BASE+6
    83             00007FC7   VIA_T1LHI		EQU VIA_BASE+7
    84             00007FC8   VIA_T2CLO		EQU VIA_BASE+8
    85             00007FC9   VIA_T2CHI		EQU VIA_BASE+9
    86             00007FCA   VIA_SR			EQU VIA_BASE+10
    87             00007FCB   VIA_ACR			EQU VIA_BASE+11
    88             00007FCC   VIA_PCR			EQU VIA_BASE+12
    89             00007FCD   VIA_IFR			EQU VIA_BASE+13
    90             00007FCE   VIA_IER			EQU VIA_BASE+14
    91             00007FCF   VIA_ORANH		EQU VIA_BASE+15
    92             00007FCF   VIA_IRANH		EQU VIA_BASE+15
    93                        
  Thu Feb  4 2016 18:05                                                Page 3

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    

    94             00007FA0   PIA_BASE		EQU $7FA0		; base a
                    ddress of PIA port on SXB
    95             00007FA0   PIA_ORA			EQU PIA_BASE
    96             00007FA0   PIA_IRA			EQU PIA_BASE
    97             00007FA0   PIA_DDRA		EQU PIA_BASE
    98             00007FA1   PIA_CTRLA		EQU PIA_BASE+1
    99             00007FA2   PIA_ORB			EQU PIA_BASE+2
   100             00007FA2   PIA_IRB			EQU PIA_BASE+2
   101             00007FA2   PIA_DDRB		EQU PIA_BASE+2
   102             00007FA3   PIA_CTRLB		EQU PIA_BASE+3
   103                        
   104             00007F80   ACIA_BASE		EQU $7F80		; base a
                    ddress of ACIA on SXB
   105             00007F80   ACIA_RXD		EQU ACIA_BASE
   106             00007F80   ACIA_TXD        EQU ACIA_BASE
   107             00007F81   ACIA_SR         EQU ACIA_BASE+1
   108             00007F82   ACIA_CMD        EQU ACIA_BASE+2
   109             00007F83   ACIA_CTL        EQU ACIA_BASE+3
   110                        
   111                        ;########################### Propeller addreses ##
                    ###################
   112                        
   113             00000000   VGA_BASE		EQU $00			; "base 
                    address" of VGA, this address is sent to the propeller
   114             00000000   VGA_PRINT		EQU VGA_BASE
   115             00000001   VGA_COL			EQU VGA_BASE+$01
   116             00000002   VGA_ROW			EQU VGA_BASE+$02
   117             00000003   VGA_ROW_COLOR	EQU VGA_BASE+$03
   118             00000004   VGA_ROW_BACK	EQU VGA_BASE+$04
   119             00000005   VGA_AUTO_INC	EQU VGA_BASE+$05
   120             00000006   VGA_FILL_CHAR	EQU VGA_BASE+$06
   121             00000007   VGA_FILL_COL	EQU VGA_BASE+$07
   122             00000008   VGA_FILL_BACK	EQU VGA_BASE+$08
   123             00000009   VGA_SCROLL_UP	EQU VGA_BASE+$09
   124             0000000A   VGA_SCROLL_DN	EQU VGA_BASE+$0A
   125                        
   126             00000010   VGA_CUR1_X		EQU VGA_BASE+$10
   127             00000011   VGA_CUR1_Y		EQU VGA_BASE+$11
   128             00000012   VGA_CUR1_MODE	EQU VGA_BASE+$12
   129             00000013   VGA_CUR2_X		EQU VGA_BASE+$13
   130             00000014   VGA_CUR2_Y		EQU VGA_BASE+$14
   131             00000015   VGA_CUR2_MODE	EQU VGA_BASE+$15
   132                        
   133             00000020   SID_BASE		EQU $20		; "base address"
                     of SID emulation, this address is sent to the propeller
   134             00000020   SID_FR1LO		EQU SID_BASE
   135             00000021   SID_FR1HI		EQU SID_BASE+$01
   136             00000022   SID_PW1LO		EQU SID_BASE+$02
   137             00000023   SID_PW1HI		EQU SID_BASE+$03
   138             00000024   SID_CR1			EQU SID_BASE+$04
   139             00000025   SID_AD1			EQU SID_BASE+$05
   140             00000026   SID_SR1			EQU SID_BASE+$06
   141                        
   142             00000027   SID_FR2LO		EQU SID_BASE+$07
   143             00000028   SID_FR2HI		EQU SID_BASE+$08
  Thu Feb  4 2016 18:05                                                Page 4

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    

   144             00000029   SID_PW2LO		EQU SID_BASE+$09
   145             0000002A   SID_PW2HI		EQU SID_BASE+$0A
   146             0000002B   SID_CR2			EQU SID_BASE+$0B
   147             0000002C   SID_AD2			EQU SID_BASE+$0C
   148             0000002D   SID_SR2			EQU SID_BASE+$0D
   149                        
   150             0000002E   SID_FR3LO		EQU SID_BASE+$0E
   151             0000002F   SID_FR3HI		EQU SID_BASE+$0F
   152             00000030   SID_PW3LO		EQU SID_BASE+$10
   153             00000031   SID_PW3HI		EQU SID_BASE+$11
   154             00000032   SID_CR3			EQU SID_BASE+$12
   155             00000033   SID_AD3			EQU SID_BASE+$13
   156             00000034   SID_SR3			EQU SID_BASE+$14
   157                        
   158             00000035   SID_FCLO		EQU SID_BASE+$15
   159             00000036   SID_FCHI		EQU SID_BASE+$16
   160             00000037   SID_RESFIL		EQU SID_BASE+$17
   161             00000038   SID_MODVOL		EQU SID_BASE+$18
   162                        
   163                        ;########################### Zero Page ###########
                    ##########
   164                        
   165                        ; String Pointers
   166             00000010   StringLo		EQU $10 ; Low pointer
   167             00000011   StringHi		EQU $11 ; High pointer
   168                        
   169                        ; Temp Storage
   170             00000012   Temp			EQU $12 ; Temp storage
   171             00000013   Temp1			EQU $13 ; Temp storage
   172             00000014   Temp2			EQU $14 ; Temp storage
   173             00000015   Temp3			EQU $15 ; Temp storage
   174                        
   175             00000020   KeyMapLo		EQU $20 ; Low pointer
   176             00000021   KeyMapHi		EQU $21 ; High pointer
   177             00000022   KeyRow00		EQU $22 ; Keyboard Matrix row 0
   178             00000023   KeyRow01		EQU $23 ; Keyboard Matrix row 1
   179             00000024   KeyRow02		EQU $24 ; Keyboard Matrix row 2
   180             00000025   KeyRow03		EQU $25 ; Keyboard Matrix row 3
   181             00000026   KeyRow04		EQU $26 ; Keyboard Matrix row 4
   182             00000027   KeyRow05		EQU $27 ; Keyboard Matrix row 5
   183             00000028   KeyRow06		EQU $28 ; Keyboard Matrix row 6
   184             00000029   KeyRow07		EQU $29 ; Keyboard Matrix row 7
   185             0000002A   KeyBitpos		EQU $2A	; Current bit Position
   186             0000002B   KeyMatrixpos	EQU $2B	; Current Position in Ma
                    trix
   187             0000002C   KeyCTRLKeys		EQU $2C ; Conntrol keys:
                     L Shift, CTRL, Run/Stop, R Shift, Commodore. L Shift is als
                    o Shift Lock.
   188             0000002D   KeyRaw			EQU $2D ; Raw value 0-63
                    , , if no key pressed, 128...
   189             0000002E   KeyCoded		EQU $2E ; ASCII encoded Value
   190             0000002F   KeyPrevious		EQU $2F ; Raw previous v
                    alue, if no key pressed, 128...
   191                        
   192             00000030   KeyX 			EQU $30 ; Cursor X
  Thu Feb  4 2016 18:05                                                Page 5

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    

   193             00000031   KeyY 			EQU $31 ; Cursor Y
   194                        
   195                        
   196                        ;########################### Main Program ########
                    #############
   197                        
   198                        	CHIP 65C02
   199                        	LONGI OFF
   200                        	LONGA OFF
   201                        
   202                        	.STTL "W65C816_Keyboard_VGA_SID"
   203                        	.PAGE
   204                        				ORG $0200
  Thu Feb  4 2016 18:05                                                Page 6

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

   205                        START
   206                        
   207 00:0200: 20 BE 04     				JSR init_ACIA		
                    	; Init ACIA
   208 00:0203: 20 4F 05     				JSR	init_Keyboard	
                    	; Setup Keyboard and VIA_KEY
   209 00:0206: 20 5B 05     				JSR init_Propeller	
                    	; Setup Propeller communication
   210                        				
   211 00:0209: A9 20        				LDA #$20		
                    		; Blank Screen
   212 00:020B: A2 06        				LDX #VGA_FILL_CHAR
   213 00:020D: 20 D5 04     				JSR writeToPropeller
   214                        				
   215 00:0210: A9 02        				LDA #02			
                    		; Red
   216 00:0212: A2 03        				LDX #03			
                    		; Green
   217 00:0214: A0 00        				LDY #00			
                    		; Blue
   218 00:0216: 20 F3 04     				JSR calc_rgb
   219 00:0219: A2 07        				LDX #VGA_FILL_COL	
                    	; Yello Text
   220 00:021B: 20 D5 04     				JSR writeToPropeller	
   221                        
   222 00:021E: A9 00        				LDA #00			
                    		; Red
   223 00:0220: A2 00        				LDX #00			
                    		; Green
   224 00:0222: A0 00        				LDY #00			
                    		; Blue
   225 00:0224: 20 F3 04     				JSR calc_rgb
   226 00:0227: A2 08        				LDX #VGA_FILL_BACK	
                    	; Blue background
   227 00:0229: 20 D5 04     				JSR writeToPropeller	
                    				
   228                        				
   229 00:022C: A9 01        				LDA #$1			
                    		; Print with one char at the time
   230 00:022E: A2 05        				LDX #VGA_AUTO_INC
   231 00:0230: 20 D5 04     				JSR writeToPropeller
   232                        
   233 00:0233: A2 1E        				LDX	#30		
                    			; Print String
   234 00:0235: A0 01        				LDY #1
   235 00:0237: A9 xx        				LDA #<String1     	
                    	; Load String Pointers.
   236 00:0239: 85 10        				STA StringLo
   237 00:023B: A9 xx        				LDA #>String1
   238 00:023D: 85 11        				STA StringHi
   239 00:023F: 20 34 05     				JSR printStringXY
   240                        
   241 00:0242: A2 1E        				LDX	#30		
                    			; Print String
   242 00:0244: A0 00        				LDY #0
  Thu Feb  4 2016 18:05                                                Page 7

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

   243 00:0246: 20 28 05     				JSR setXY
   244                        				
   245 00:0249: A9 0A        				LDA #10
   246 00:024B: A2 00        				LDX #VGA_PRINT		
                    	; Print
   247 00:024D: 20 D5 04     				JSR writeToPropeller	
                    		
   248 00:0250: A9 0E        				LDA #14
   249 00:0252: A0 27        				LDY #39
   250 00:0254: 20 D5 04     d1				JSR writeToPropeller	
                    		
   251 00:0257: 88           				DEY
   252 00:0258: D0 FA        				BNE d1
   253 00:025A: A9 0B        				LDA #11
   254 00:025C: 20 D5 04     				JSR writeToPropeller	
                    		
   255                        				
   256 00:025F: A2 1E        				LDX	#30		
                    			; Print String
   257 00:0261: A0 02        				LDY #2
   258 00:0263: 20 28 05     				JSR setXY
   259                        				
   260 00:0266: A9 0C        				LDA #12
   261 00:0268: A2 00        				LDX #VGA_PRINT		
                    	; Print
   262 00:026A: 20 D5 04     				JSR writeToPropeller	
                    		
   263 00:026D: A9 0E        				LDA #14
   264 00:026F: A0 27        				LDY #39
   265 00:0271: 20 D5 04     d2				JSR writeToPropeller	
                    		
   266 00:0274: 88           				DEY
   267 00:0275: D0 FA        				BNE d2
   268 00:0277: A9 0D        				LDA #13
   269 00:0279: 20 D5 04     				JSR writeToPropeller	
                    		
   270                        
   271                        ; Green area
   272                        
   273 00:027C: A0 04        				LDY #4
   274 00:027E: 84 15        				STY Temp3
   275                        				
   276 00:0280: A9 00        				LDA #00			
                    		; Red
   277 00:0282: A2 03        				LDX #03			
                    		; Green
   278 00:0284: A0 00        				LDY #00			
                    		; Blue
   279 00:0286: 20 F3 04     				JSR calc_rgb
   280 00:0289: 85 13        				STA Temp1
   281                        
   282 00:028B: A9 00        				LDA #00			
                    		; Red
   283 00:028D: A2 01        				LDX #01 		
                    		; Green
  Thu Feb  4 2016 18:05                                                Page 8

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

   284 00:028F: A0 00        				LDY #00			
                    		; Blue
   285 00:0291: 20 F3 04     				JSR calc_rgb
   286 00:0294: 85 14        				STA Temp2
   287                        
   288 00:0296: A2 00        g1				LDX	#0
   289 00:0298: A4 15        				LDY Temp3
   290 00:029A: 20 28 05     				JSR setXY
   291                        
   292 00:029D: A5 13        				LDA Temp1
   293 00:029F: A2 04        				LDX #VGA_ROW_BACK	
                    	; Blue background
   294 00:02A1: 20 D5 04     				JSR writeToPropeller	
                    			
   295                        
   296 00:02A4: A5 14        				LDA Temp2
   297 00:02A6: A2 03        				LDX #VGA_ROW_COLOR	
                    	; Blue background
   298 00:02A8: 20 D5 04     				JSR writeToPropeller	
                    						
   299                        
   300 00:02AB: E6 15        				INC Temp3
   301 00:02AD: A4 15        				LDY Temp3
   302 00:02AF: C0 2F        				CPY #47
   303 00:02B1: D0 E3        				BNE g1
   304                        
   305 00:02B3: A2 00        				LDX	#0		
                    			; Print String
   306 00:02B5: A0 04        				LDY #4
   307 00:02B7: 20 28 05     				JSR setXY
   308                        				
   309 00:02BA: A9 0A        				LDA #10
   310 00:02BC: A2 00        				LDX #VGA_PRINT		
                    	; Print
   311 00:02BE: 20 D5 04     				JSR writeToPropeller	
                    		
   312 00:02C1: A9 0E        				LDA #14
   313 00:02C3: A0 3C        				LDY #60
   314 00:02C5: 20 D5 04     g2				JSR writeToPropeller	
                    		
   315 00:02C8: 88           				DEY
   316 00:02C9: D0 FA        				BNE g2
   317 00:02CB: A9 0B        				LDA #11
   318 00:02CD: 20 D5 04     				JSR writeToPropeller	
                    		
   319                        				
   320 00:02D0: A2 00        				LDX	#0		
                    			; Print String
   321 00:02D2: A0 2E        				LDY #46
   322 00:02D4: 20 28 05     				JSR setXY
   323                        				
   324 00:02D7: A9 0C        				LDA #12
   325 00:02D9: A2 00        				LDX #VGA_PRINT		
                    	; Print
   326 00:02DB: 20 D5 04     				JSR writeToPropeller	
  Thu Feb  4 2016 18:05                                                Page 9

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

                    		
   327 00:02DE: A9 0E        				LDA #14
   328 00:02E0: A0 3C        				LDY #60
   329 00:02E2: 20 D5 04     g3				JSR writeToPropeller	
                    		
   330 00:02E5: 88           				DEY
   331 00:02E6: D0 FA        				BNE g3
   332 00:02E8: A9 0D        				LDA #13
   333 00:02EA: 20 D5 04     				JSR writeToPropeller	
                    		
   334                        
   335                        				
   336 00:02ED: A0 05        				LDY #5
   337 00:02EF: 84 15        				STY Temp3
   338 00:02F1: A2 00        g4				LDX	#0		
                    			; Print String
   339 00:02F3: 20 28 05     				JSR setXY
   340                        				
   341 00:02F6: A9 0F        				LDA #15
   342 00:02F8: A2 00        				LDX #VGA_PRINT		
                    	; Print
   343 00:02FA: 20 D5 04     				JSR writeToPropeller
   344 00:02FD: E6 15        				INC Temp3
   345 00:02FF: A4 15        				LDY Temp3
   346 00:0301: C0 2E        				CPY #46
   347 00:0303: D0 EC        				BNE g4			
                    	
   348                        				
   349 00:0305: A0 05        				LDY #5
   350 00:0307: 84 15        				STY Temp3
   351 00:0309: A2 3D        g5				LDX	#61		
                    			; Print String
   352 00:030B: 20 28 05     				JSR setXY
   353                        				
   354 00:030E: A9 0F        				LDA #15
   355 00:0310: A2 00        				LDX #VGA_PRINT		
                    	; Print
   356 00:0312: 20 D5 04     				JSR writeToPropeller
   357 00:0315: E6 15        				INC Temp3
   358 00:0317: A4 15        				LDY Temp3
   359 00:0319: C0 2E        				CPY #46
   360 00:031B: D0 EC        				BNE g5
   361                        				
   362                        
   363 00:031D: A2 3E        				LDX	#62		
                    			; Print String
   364 00:031F: A0 04        				LDY #4
   365 00:0321: 20 28 05     				JSR setXY
   366                        				
   367 00:0324: A9 0A        				LDA #10
   368 00:0326: A2 00        				LDX #VGA_PRINT		
                    	; Print
   369 00:0328: 20 D5 04     				JSR writeToPropeller	
                    		
   370 00:032B: A9 0E        				LDA #14
  Thu Feb  4 2016 18:05                                                Page 10

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

   371 00:032D: A0 24        				LDY #36
   372 00:032F: 20 D5 04     g6				JSR writeToPropeller	
                    		
   373 00:0332: 88           				DEY
   374 00:0333: D0 FA        				BNE g6
   375 00:0335: A9 0B        				LDA #11
   376 00:0337: 20 D5 04     				JSR writeToPropeller	
                    		
   377                        				
   378 00:033A: A2 3E        				LDX	#62		
                    			; Print String
   379 00:033C: A0 2E        				LDY #46
   380 00:033E: 20 28 05     				JSR setXY
   381                        				
   382 00:0341: A9 0C        				LDA #12
   383 00:0343: A2 00        				LDX #VGA_PRINT		
                    	; Print
   384 00:0345: 20 D5 04     				JSR writeToPropeller	
                    		
   385 00:0348: A9 0E        				LDA #14
   386 00:034A: A0 24        				LDY #36
   387 00:034C: 20 D5 04     g7				JSR writeToPropeller	
                    		
   388 00:034F: 88           				DEY
   389 00:0350: D0 FA        				BNE g7
   390 00:0352: A9 0D        				LDA #13
   391 00:0354: 20 D5 04     				JSR writeToPropeller	
                    		
   392                        
   393                        
   394 00:0357: A0 05        				LDY #5
   395 00:0359: 84 15        				STY Temp3
   396 00:035B: A2 3E        g8				LDX	#62		
                    			; Print String
   397 00:035D: 20 28 05     				JSR setXY
   398                        				
   399 00:0360: A9 0F        				LDA #15
   400 00:0362: A2 00        				LDX #VGA_PRINT		
                    	; Print
   401 00:0364: 20 D5 04     				JSR writeToPropeller
   402 00:0367: E6 15        				INC Temp3
   403 00:0369: A4 15        				LDY Temp3
   404 00:036B: C0 2E        				CPY #46
   405 00:036D: D0 EC        				BNE g8
   406                        				
   407 00:036F: A0 05        				LDY #5
   408 00:0371: 84 15        				STY Temp3
   409 00:0373: A2 63        g9				LDX	#99		
                    			; Print String
   410 00:0375: 20 28 05     				JSR setXY
   411                        				
   412 00:0378: A9 0F        				LDA #15
   413 00:037A: A2 00        				LDX #VGA_PRINT		
                    	; Print
   414 00:037C: 20 D5 04     				JSR writeToPropeller
  Thu Feb  4 2016 18:05                                                Page 11

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

   415 00:037F: E6 15        				INC Temp3
   416 00:0381: A4 15        				LDY Temp3
   417 00:0383: C0 2E        				CPY #46
   418 00:0385: D0 EC        				BNE g9
   419                        				
   420                        
   421 00:0387: A2 3F        				LDX	#63		
                    			; Print String
   422 00:0389: A0 05        				LDY #5
   423 00:038B: A9 xx        				LDA #<String3     	
                    	; Load String Pointers.
   424 00:038D: 85 10        				STA StringLo
   425 00:038F: A9 xx        				LDA #>String3
   426 00:0391: 85 11        				STA StringHi
   427 00:0393: 20 34 05     				JSR printStringXY
   428                        
   429 00:0396: A2 3F        				LDX	#63		
                    			; Print String
   430 00:0398: A0 06        				LDY #6
   431 00:039A: A9 xx        				LDA #<String4     	
                    	; Load String Pointers.
   432 00:039C: 85 10        				STA StringLo
   433 00:039E: A9 xx        				LDA #>String4
   434 00:03A0: 85 11        				STA StringHi
   435 00:03A2: 20 34 05     				JSR printStringXY	
                    			
   436                        				
   437                        ; Blue area				
   438 00:03A5: A2 00        				LDX	#0
   439 00:03A7: A0 2F        				LDY #47
   440 00:03A9: 20 28 05     				JSR setXY
   441                        				
   442 00:03AC: A9 00        				LDA #00			
                    		; Red
   443 00:03AE: A2 00        				LDX #00			
                    		; Green
   444 00:03B0: A0 03        				LDY #03			
                    		; Blue
   445 00:03B2: 20 F3 04     				JSR calc_rgb
   446 00:03B5: 85 13        				STA Temp1
   447 00:03B7: A2 04        				LDX #VGA_ROW_BACK	
                    	; Blue background
   448 00:03B9: 20 D5 04     				JSR writeToPropeller	
                    			
   449                        
   450 00:03BC: A9 02        				LDA #02			
                    		; Red
   451 00:03BE: A2 02        				LDX #02			
                    		; Green
   452 00:03C0: A0 02        				LDY #02			
                    		; Blue
   453 00:03C2: 20 F3 04     				JSR calc_rgb
   454 00:03C5: 85 14        				STA Temp2
   455 00:03C7: A2 03        				LDX #VGA_ROW_COLOR	
                    	; Blue background
  Thu Feb  4 2016 18:05                                                Page 12

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

   456 00:03C9: 20 D5 04     				JSR writeToPropeller	
                    						
   457                        
   458 00:03CC: A9 0A        				LDA #10
   459 00:03CE: A2 00        				LDX #VGA_PRINT		
                    	; Print
   460 00:03D0: 20 D5 04     				JSR writeToPropeller	
                    		
   461 00:03D3: A9 0E        				LDA #14
   462 00:03D5: A0 62        				LDY #98
   463 00:03D7: 20 D5 04     d3				JSR writeToPropeller	
                    		
   464 00:03DA: 88           				DEY
   465 00:03DB: D0 FA        				BNE d3
   466 00:03DD: A9 0B        				LDA #11
   467 00:03DF: 20 D5 04     				JSR writeToPropeller	
                    			
   468                        				
   469 00:03E2: A2 00        				LDX	#0
   470 00:03E4: A0 30        				LDY #48
   471 00:03E6: 20 28 05     				JSR setXY
   472                        
   473 00:03E9: A5 13        				LDA Temp1
   474 00:03EB: A2 04        				LDX #VGA_ROW_BACK	
                    	; Blue background
   475 00:03ED: 20 D5 04     				JSR writeToPropeller	
                    			
   476                        
   477 00:03F0: A5 14        				LDA Temp2
   478 00:03F2: A2 03        				LDX #VGA_ROW_COLOR	
                    	; Blue background
   479 00:03F4: 20 D5 04     				JSR writeToPropeller	
                    						
   480                        
   481 00:03F7: A9 0F        				LDA #15
   482 00:03F9: A2 00        				LDX #VGA_PRINT		
                    	; Print
   483 00:03FB: 20 D5 04     				JSR writeToPropeller	
                    		
   484                        
   485 00:03FE: A2 63        				LDX	#99
   486 00:0400: A0 30        				LDY #48
   487 00:0402: 20 28 05     				JSR setXY
   488                        
   489 00:0405: A9 0F        				LDA #15
   490 00:0407: A2 00        				LDX #VGA_PRINT		
                    	; Print
   491 00:0409: 20 D5 04     				JSR writeToPropeller	
                    		
   492                        				
   493 00:040C: A2 00        				LDX	#0
   494 00:040E: A0 31        				LDY #49
   495 00:0410: 20 28 05     				JSR setXY
   496                        
   497 00:0413: A5 13        				LDA Temp1
  Thu Feb  4 2016 18:05                                                Page 13

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

   498 00:0415: A2 04        				LDX #VGA_ROW_BACK	
                    	; Blue background
   499 00:0417: 20 D5 04     				JSR writeToPropeller	
                    			
   500                        
   501 00:041A: A5 14        				LDA Temp2
   502 00:041C: A2 03        				LDX #VGA_ROW_COLOR	
                    	; Blue background
   503 00:041E: 20 D5 04     				JSR writeToPropeller	
                    						
   504                        
   505 00:0421: A9 0C        				LDA #12
   506 00:0423: A2 00        				LDX #VGA_PRINT		
                    	; Print
   507 00:0425: 20 D5 04     				JSR writeToPropeller	
                    		
   508 00:0428: A9 0E        				LDA #14
   509 00:042A: A0 62        				LDY #98
   510 00:042C: 20 D5 04     d4				JSR writeToPropeller	
                    		
   511 00:042F: 88           				DEY
   512 00:0430: D0 FA        				BNE d4
   513 00:0432: A9 0D        				LDA #13
   514 00:0434: 20 D5 04     				JSR writeToPropeller	
                    			
   515                        
   516 00:0437: A2 01        				LDX	#1		
                    			; Print String
   517 00:0439: A0 30        				LDY #48
   518 00:043B: A9 xx        				LDA #<String2     	
                    	; Load String Pointers.
   519 00:043D: 85 10        				STA StringLo
   520 00:043F: A9 xx        				LDA #>String2
   521 00:0441: 85 11        				STA StringHi
   522 00:0443: 20 34 05     				JSR printStringXY
   523                        				
   524 00:0446: A2 01        				LDX	#1
   525 00:0448: 86 30        				STX KeyX
   526 00:044A: A0 05        				LDY #5
   527 00:044C: 84 31        				STY KeyY
   528 00:044E: 20 28 05     				JSR setXY		
                    		
   529                        				
   530                        				
   531                        MAINLOOP
   532                        				
   533 00:0451: 20 6D 05     				JSR read_KeyMatrix
   534                        
   535 00:0454: A2 28        				LDX	#40
   536 00:0456: A0 30        				LDY #48
   537 00:0458: 20 28 05     				JSR setXY
   538 00:045B: A2 00        				LDX #0
   539 00:045D: 86 15        				STX Temp3
   540                        				
   541 00:045F: B5 22        q1				LDA KeyRow00, X
  Thu Feb  4 2016 18:05                                                Page 14

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

   542 00:0461: 20 0F 05     				JSR printHex
   543 00:0464: A9 20        				LDA #$20
   544 00:0466: A2 00        				LDX #VGA_PRINT		
                    	; Print
   545 00:0468: 20 D5 04     				JSR writeToPropeller
   546 00:046B: E6 15        				INC Temp3
   547 00:046D: A6 15        				LDX Temp3
   548 00:046F: E0 08        				CPX #8
   549 00:0471: D0 EC        				BNE q1
   550                        
   551                        				
   552 00:0473: 20 88 05     				JSR encode_Keyboard
   553                        
   554 00:0476: A2 0E        				LDX	#14
   555 00:0478: A0 30        				LDY #48
   556 00:047A: 20 28 05     				JSR setXY
   557 00:047D: A5 2C        				LDA KeyCTRLKeys
   558 00:047F: 20 0F 05     				JSR printHex
   559                        				
   560 00:0482: A5 2D        				LDA KeyRaw		
                    		; Load raw char
   561 00:0484: 30 14        				BMI no_key_pressed	
                    	; Pressed ?
   562 00:0486: C5 2F        				CMP KeyPrevious		
                    	; Same as previous ?
   563 00:0488: F0 10        				BEQ no_key_pressed	
                    	; Then don't print
   564                        				
   565 00:048A: A6 30        				LDX KeyX
   566 00:048C: A4 31        				LDY KeyY
   567 00:048E: 20 28 05     				JSR setXY		
                    		
   568                        				
   569 00:0491: A5 2E        				LDA KeyCoded		
                    	; Get mapped key
   570 00:0493: A2 00        				LDX #VGA_PRINT		
                    	; Print
   571 00:0495: 20 D5 04     				JSR writeToPropeller	
                    			
   572                        				
   573 00:0498: E6 30        				INC KeyX
   574                        				
   575                        no_key_pressed				
   576 00:049A: 20 FB 05     				JSR delay
   577 00:049D: 4C 51 04     				JMP MAINLOOP
   578                        				
   579                        print_NewLine
   580 00:04A0: A9 0C        				LDA #$0C
   581 00:04A2: 20 EA 05     				JSR sendChar
   582 00:04A5: A9 0D        				LDA #$0D
   583 00:04A7: 20 EA 05     				JSR sendChar
   584 00:04AA: 60           				RTS
   585                        				
   586                        				
   587                        ;-------------------------------------------------
  Thu Feb  4 2016 18:05                                                Page 15

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

                    ------------------------
   588                        ; init_Key_VIA: init VIA for Keyboard
   589                        ;-------------------------------------------------
                    ------------------------				
   590                        				
   591                        init_Key_VIA
   592 00:04AB: A9 FF        				LDA #$FF
   593 00:04AD: 8D 03 7F     				STA VIA_KEY_DDRA	
                    ; Make Port A output.
   594 00:04B0: 9C 02 7F     				STZ VIA_KEY_DDRB	
                    ; Make Port B input.
   595                        
   596 00:04B3: AD 0B 7F     				LDA VIA_KEY_ACR     ; Lo
                    ad ACR
   597 00:04B6: 29 E3        				AND #$E3            ; Ze
                    ro bit 4,3,2.
   598 00:04B8: 09 08        				ORA #$08            ; Sh
                    ift in using Phi2 ($08).
   599 00:04BA: 8D 0B 7F     				STA VIA_KEY_ACR
   600 00:04BD: 60           				RTS
   601                        
   602                        ;-------------------------------------------------
                    ------------------------
   603                        ; init_ACIA: init ACIA
   604                        ;-------------------------------------------------
                    ------------------------				
   605                        				
   606                        init_ACIA				
   607 00:04BE: 9C 82 7F                     STZ     ACIA_CMD                ; C
                    onfigure ACIA
   608 00:04C1: 9C 83 7F                     STZ     ACIA_CTL
   609 00:04C4: 9C 81 7F                     STZ     ACIA_SR
   610                        
   611 00:04C7: A9 10                        LDA     #%00010000              ; 8
                     bits, 1 stop bit, full baud ahead.
   612 00:04C9: 8D 83 7F                     STA     ACIA_CTL
   613 00:04CC: A9 C9                        LDA     #%11001001              ; N
                    o parity, no interrupt
   614 00:04CE: 8D 82 7F                     STA     ACIA_CMD
   615 00:04D1: AD 80 7F                     LDA     ACIA_RXD                ; C
                    lear receive buffer				
   616 00:04D4: 60           				RTS
   617                        
   618                        ;-------------------------------------------------
                    ------------------------
   619                        ; writeToPropeller, A is data, X is Address
   620                        ;-------------------------------------------------
                    ------------------------
   621                        
   622                        writeToPropeller
   623 00:04D5: 48           				PHA			
                    		; Save A
   624 00:04D6: 48           				PHA			
                    		; Save A Again
   625 00:04D7: AD 20 7F     tstBusy			LDA	VIA_PROP_IRB	
  Thu Feb  4 2016 18:05                                                Page 16

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

                    ; Read Output.
   626 00:04DA: 30 FB        				BMI	tstBusy		
                    	; Wait for Propeller to finish, high bit will be low whe
                    n done.
   627 00:04DC: 68           				PLA			
                    		; Restore A
   628 00:04DD: 8D 21 7F     				STA	VIA_PROP_ORA
   629 00:04E0: 8A           				TXA
   630 00:04E1: 09 40        				ORA #$40		
                    	; Set Write Flag.
   631 00:04E3: 8D 20 7F     				STA VIA_PROP_ORB	
                    ; Send data.
   632 00:04E6: AD 20 7F     tstBusy2		LDA	VIA_PROP_ORB	; Read O
                    utput.
   633 00:04E9: 10 FB        				BPL	tstBusy2	
                    	; Wait for Propeller to be busy, high bit will be high w
                    hen busy
   634 00:04EB: 8A           				TXA
   635 00:04EC: 29 3F        				AND #$3F		
                    	; Clear Write Flag.
   636 00:04EE: 8D 20 7F     				STA VIA_PROP_ORB	
                    ; Flag it.
   637                        				
   638 00:04F1: 68           				PLA			
                    		; Restore A
   639 00:04F2: 60           				RTS			
                    	
   640                        				
   641                        ;-------------------------------------------------
                    ------------------------
   642                        ; calc_rgb: A = R, X = G, Y = B values between 0 a
                    nd 3
   643                        ; Resulting byte is RRGGBB00 each two bit values.
   644                        ;-------------------------------------------------
                    ------------------------
   645                        
   646 00:04F3: 18           calc_rgb		CLC
   647 00:04F4: 2A           				ROL			
                    	; Shift Red 6 bits
   648 00:04F5: 2A           				ROL
   649 00:04F6: 2A           				ROL
   650 00:04F7: 2A           				ROL
   651 00:04F8: 2A           				ROL
   652 00:04F9: 2A           				ROL
   653 00:04FA: 85 12        				STA Temp		
                    ; Store in Temp
   654 00:04FC: 8A           				TXA			
                    	; X to A and shift Green 4 bits
   655 00:04FD: 18           				CLC
   656 00:04FE: 2A           				ROL
   657 00:04FF: 2A           				ROL
   658 00:0500: 2A           				ROL
   659 00:0501: 2A           				ROL
   660 00:0502: 18           				CLC
   661 00:0503: 65 12        				ADC Temp		
  Thu Feb  4 2016 18:05                                                Page 17

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

                    ; Add with Temp
   662 00:0505: 85 12        				STA Temp		
                    ; Store in Temp
   663 00:0507: 98           				TYA			
                    	; Y to A and shift Blue 2 bits
   664 00:0508: 18           				CLC
   665 00:0509: 2A           				ROL
   666 00:050A: 2A           				ROL
   667 00:050B: 18           				CLC
   668 00:050C: 65 12        				ADC Temp		
                    ; Add with Temp
   669 00:050E: 60           				RTS
   670                        
   671                        ;-------------------------------------------------
                    ------------------------
   672                        ; printHex: Print a HEX value, the Woz way...
   673                        ;-------------------------------------------------
                    ------------------------
   674                        
   675                        printHex
   676 00:050F: 48           				PHA			
                    	; Save A for LSD
   677 00:0510: 4A           				LSR
   678 00:0511: 4A           				LSR
   679 00:0512: 4A           				LSR			
                    	; MSD to LSD position
   680 00:0513: 4A           				LSR
   681 00:0514: 20 18 05     				JSR PRHEX		
                    ; Output hex digit 
   682 00:0517: 68           				PLA			
                    	; Restore A
   683 00:0518: 29 0F        PRHEX			AND #%00001111	; Mask L
                    SD for hex print			  
   684 00:051A: 09 30        				ORA #"0"		
                    ; Add "0"
   685 00:051C: C9 3A        				CMP #"9"+1		
                    ; Is it a decimal digit ?
   686 00:051E: 90 02        				BCC ECHO		
                    ; Yes Output it
   687 00:0520: 69 06        				ADC #6			
                    ; Add offset for letter A-F
   688 00:0522: A2 00        ECHO			LDX #VGA_PRINT	; Print
   689 00:0524: 20 D5 04     				JSR writeToPropeller	
                    ; Print it...
   690 00:0527: 60           				RTS
   691                        
   692                        ;-------------------------------------------------
                    ------------------------
   693                        ; setXY: Set XY from X and Y register.
   694                        ;-------------------------------------------------
                    ------------------------
   695                        
   696                        setXY
   697 00:0528: 8A           				TXA
   698 00:0529: A2 01        				LDX #VGA_COL
  Thu Feb  4 2016 18:05                                                Page 18

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

   699 00:052B: 20 D5 04     				JSR writeToPropeller
   700 00:052E: 98           				TYA
   701 00:052F: A2 02        				LDX #VGA_ROW
   702 00:0531: 4C D5 04     				JMP writeToPropeller
   703                        			  
   704                        ;-------------------------------------------------
                    ------------------------
   705                        ; printStringXY: Print a string preloaded in Strin
                    gLo at XY from X and Y register.
   706                        ;-------------------------------------------------
                    ------------------------
   707                        
   708                        printStringXY
   709 00:0534: 8A           				TXA
   710 00:0535: A2 01        				LDX #VGA_COL
   711 00:0537: 20 D5 04     				JSR writeToPropeller
   712 00:053A: 98           				TYA
   713 00:053B: A2 02        				LDX #VGA_ROW
   714 00:053D: 20 D5 04     				JSR writeToPropeller
   715                        
   716                        ;-------------------------------------------------
                    ------------------------
   717                        ; printString: Print a string preloaded in StringL
                    o
   718                        ;-------------------------------------------------
                    ------------------------
   719                        
   720                        printString
   721 00:0540: A0 00        				LDY #0
   722 00:0542: B1 10        nextChar		LDA (StringLo),Y	; Get ch
                    aracter
   723 00:0544: F0 08        				BEQ done_Printing	
                    ; Zero, we done...
   724 00:0546: A2 00        				LDX #VGA_PRINT		
                    ; Print
   725 00:0548: 20 D5 04     				JSR writeToPropeller
   726 00:054B: C8           				INY			
                    		; Next, cannot print more than 254 bytes or we w
                    rap around in an infinite loop.
   727 00:054C: 80 F4        				BRA nextChar		
                    ; Continue
   728 00:054E: 60           done_Printing	RTS				
   729                        				
   730                        ;-------------------------------------------------
                    ------------------------
   731                        ; init_Keyboard: Setup Keyboard to be read.
   732                        ;-------------------------------------------------
                    ------------------------				
   733                        
   734                        init_Keyboard				
   735 00:054F: A9 xx        				LDA #<keyMatrixMap     	
                    	; Load String Pointers.
   736 00:0551: 85 20        				STA KeyMapLo
   737 00:0553: A9 xx        				LDA #>keyMatrixMap
   738 00:0555: 85 21        				STA KeyMapHi
  Thu Feb  4 2016 18:05                                                Page 19

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

   739 00:0557: 20 AB 04     				JSR init_Key_VIA	
                    		; Init VIA
   740 00:055A: 60           				RTS
   741                        				
   742                        ;-------------------------------------------------
                    ------------------------
   743                        ; init_Propeller: Setup Propeller communication
   744                        ;-------------------------------------------------
                    ------------------------				
   745                        
   746                        init_Propeller
   747 00:055B: A9 FF        				LDA #$FF		
                    		; Make all output
   748 00:055D: 8D 23 7F     				STA VIA_PROP_DDRA
   749 00:0560: A9 7F        				LDA #$7F
   750 00:0562: 8D 22 7F     				STA VIA_PROP_DDRB	
                    	; Bit 0-7 output, bit 8 input
   751 00:0565: 60           				RTS
   752                        				
   753                        ;-------------------------------------------------
                    ------------------------
   754                        ; read_Keyboard: Read the C64 Keyboard
   755                        ;-------------------------------------------------
                    ------------------------				
   756                        				
   757                        read_Keyboard	
   758 00:0566: 20 6D 05     				JSR read_KeyMatrix
   759 00:0569: 20 88 05     				JSR encode_Keyboard
   760 00:056C: 60           				RTS
   761                        
   762                        ;-------------------------------------------------
                    ------------------------
   763                        ; read_KeyMatrix: Read the Key Matrix
   764                        ;-------------------------------------------------
                    ------------------------				
   765                        
   766                        read_KeyMatrix
   767 00:056D: A9 01        				LDA #$01		
                    	; Start with bit 1
   768 00:056F: 85 2A        				STA KeyBitpos		
                    ; Save position
   769 00:0571: A2 00        				LDX #00			
                    	; Zero X
   770 00:0573: A5 2A        bitLoop			LDA KeyBitpos		
                    ; First bits
   771 00:0575: 8D 01 7F     				STA VIA_KEY_ORA		
                    ; Set Matrix
   772 00:0578: EA           				NOP			
                    		; Wait for value to be stable
   773 00:0579: EA           				NOP
   774 00:057A: EA           				NOP			
                    		; Wait for it...
   775 00:057B: EA           				NOP			
                    		; Should be stable by now...
   776 00:057C: AD 00 7F     				LDA VIA_KEY_IRB		
  Thu Feb  4 2016 18:05                                                Page 20

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

                    ; Read Matrix byte
   777 00:057F: 95 22        				STA KeyRow00, X		
                    ; Save data in position relative to X
   778 00:0581: E8           				INX			
                    		; Next save position
   779 00:0582: 18           				CLC			
                    		; Clear Carry
   780 00:0583: 26 2A        				ROL KeyBitpos		
                    ; Roll position left, the bit is now pointing to the next ro
                    w in the Keyboard matrix
   781 00:0585: 90 EC        				BCC bitLoop		
                    	; Are we done yet ? If Carry was shifted out, nothing mo
                    re to read.
   782 00:0587: 60           				RTS
   783                        				
   784                        ;-------------------------------------------------
                    ------------------------
   785                        ; encode_Keyboard: Read the C64 Keyboard
   786                        ;-------------------------------------------------
                    ------------------------				
   787                        				
   788                        encode_Keyboard	
   789                        
   790 00:0588: A5 2D        				LDA KeyRaw		
                    	; Exchange Previous key.
   791 00:058A: 85 2F        				STA KeyPrevious
   792                        
   793 00:058C: AD 0A 7F     				LDA VIA_KEY_SR		
                    ; Read Restore Key.
   794                        				; Reading the SR registe
                    r starts a shift in, the restore key is hooked up to CB2
   795                        				
   796 00:058F: A5 22        				LDA KeyRow00		
                    ; Top Matrix row.
   797 00:0591: 29 2C        				AND #%00101100		
                    ; Filter out CTRL, Stop and Commodore key, we only want thes
                    e bits
   798 00:0593: 85 2C        				STA KeyCTRLKeys		
                    ; Save it
   799 00:0595: A5 22        				LDA KeyRow00		
                    ; Top Matrix row.
   800 00:0597: 29 D3        				AND #%11010011		
                    ; Remove CTRL, Stop and Commodore key since we are done with
                     them.
   801 00:0599: 85 22        				STA KeyRow00		
                    ; Save it
   802                        				
   803 00:059B: A5 23        				LDA KeyRow01		
                    ; Second Matrix row.
   804 00:059D: 29 08        				AND #%00001000		
                    ; Filter out Left Shift
   805 00:059F: 18           				CLC			
                    		; Clear carry for Rotate
   806 00:05A0: 6A           				ROR			
                    		; Shift bit twice so it does not collide with ot
  Thu Feb  4 2016 18:05                                                Page 21

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

                    her bits
   807 00:05A1: 6A           				ROR
   808 00:05A2: 05 2C        				ORA KeyCTRLKeys		
                    ; Ora with previous result
   809 00:05A4: 85 2C        				STA KeyCTRLKeys		
                    ; Save
   810 00:05A6: A5 23        				LDA KeyRow01		
                    ; Second Matrix row.
   811 00:05A8: 29 F7        				AND #%11110111		
                    ; Remove Left Shift since we are done with it.
   812 00:05AA: 85 23        				STA KeyRow01		
                    ; Save it
   813                        
   814 00:05AC: A5 28        				LDA KeyRow06		
                    ; Sixth Matrix row.
   815 00:05AE: 29 10        				AND #%00010000		
                    ; Filter out Right Shift
   816 00:05B0: 05 2C        				ORA KeyCTRLKeys		
                    ; Ora with previous result
   817 00:05B2: 85 2C        				STA KeyCTRLKeys		
                    ; Save
   818 00:05B4: A5 28        				LDA KeyRow06		
                    ; Sixth Matrix row.
   819 00:05B6: 29 EF        				AND #%11101111		
                    ; Remove Right Shift since we are done with it.
   820 00:05B8: 85 28        				STA KeyRow06		
                    ; Save it
   821                        				
   822 00:05BA: AD 0A 7F     				LDA VIA_KEY_SR		
                    ; Restore Key should be done by now. Get actual value.
   823 00:05BD: 29 01        				AND #%00000001		
                    ; Filter out one bit.
   824 00:05BF: 05 2C        				ORA KeyCTRLKeys		
                    ; Ora with previous result
   825 00:05C1: 85 2C        				STA KeyCTRLKeys		
                    ; Save
   826                        				
   827                        				; Control keys, 
   828                        				; Bit 1: Restore
   829                        				; Bit 2: Left Shift, Shi
                    ft Lock
   830                        				; Bit 3: CTRL
   831                        				; Bit 4: Run Stop
   832                        				; BIT 5: Right Shift
   833                        				; Bit 6: Commodore key
   834                        				
   835 00:05C3: A0 00        				LDY #$00		
                    	; Zero Y, this is position 0-7 in bits.
   836 00:05C5: A2 00        				LDX #$00		
                    	; Zero X, this is the current Matrix byte
   837 00:05C7: 64 2B        				STZ KeyMatrixpos	
                    ; Zero matrix position				
   838 00:05C9: 76 22        bitLoop2		ROR KeyRow00, X		; Shift 
                    Matrix data, test first bit.
   839 00:05CB: 90 0A        				BCC	no_key_press    
  Thu Feb  4 2016 18:05                                                Page 22

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

                    ; No key pressed
   840 00:05CD: A4 2B        				LDY KeyMatrixpos	
                    ; Get position
   841 00:05CF: 84 2D        				STY KeyRaw		
                    	; Save raw key value
   842 00:05D1: B1 20        				LDA (KeyMapLo), Y	
                    ; Look up actual character
   843 00:05D3: 85 2E        				STA KeyCoded		
                    ; Save coded key.
   844 00:05D5: 80 12        				BRA done_encoding	
                    ; We are done.
   845 00:05D7: E6 2B        no_key_press	INC KeyMatrixpos	; Next p
                    os in matrix
   846 00:05D9: C8           				INY			
                    		; Next current bit pos.
   847 00:05DA: C0 08        				CPY #8			
                    	; Done yet ?
   848 00:05DC: D0 EB        				BNE bitLoop2		
                    ; Continue on...
   849 00:05DE: A0 00        				LDY #$00		
                    	; Reset bit position
   850 00:05E0: E8           				INX			
                    		; Next Matrix  position
   851 00:05E1: E0 08        				CPX #8			
                    	; Done yet ?
   852 00:05E3: D0 E4        				BNE bitLoop2		
                    ; Continue on
   853                        				
   854 00:05E5: A9 80        				LDA #$80		
                    	; Flag no key pressed.
   855 00:05E7: 85 2D        				STA KeyRaw		
                    	; Save it
   856                        done_encoding
   857 00:05E9: 60           				RTS
   858                        				
   859                        ;-------------------------------------------------
                    ------------------------
   860                        ; printString: Print a String 
   861                        ;-------------------------------------------------
                    ------------------------				
   862                        				
   863                        sendChar
   864 00:05EA: 48           				PHA
   865 00:05EB: 08           				PHP
   866 00:05EC: 8D 80 7F     				STA ACIA_TXD
   867 00:05EF: 20 F5 05     				JSR TxDelay
   868 00:05F2: 28           				PLP
   869 00:05F3: 68           				PLA
   870 00:05F4: 60           				RTS
   871                        
   872                        ;-------------------------------------------------
                    ------------------------
   873                        ; TxDelay: Send delay
   874                        ;-------------------------------------------------
                    ------------------------				
  Thu Feb  4 2016 18:05                                                Page 23

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

   875                        				
   876                        TxDelay
   877 00:05F5: A9 60        				LDA #$60
   878 00:05F7: 1A           				INC
   879 00:05F8: D0 FD        				BNE $-1
   880 00:05FA: 60           				RTS
   881                        				
   882                        ;-------------------------------------------------
                    ------------------------
   883                        ; delay: Just a Delay
   884                        ;-------------------------------------------------
                    ------------------------				
   885                        
   886 00:05FB: A9 01        delay			LDA #$01
   887 00:05FD: A0 00        				LDY #$00            ; Lo
                    op 8*256*256 times...
   888 00:05FF: A2 00        				LDX #$00
   889 00:0601: CA           dloop1			DEX
   890 00:0602: D0 FD        				BNE dloop1
   891 00:0604: 88           				DEY
   892 00:0605: D0 FA        				BNE dloop1
   893 00:0607: 3A           				DEC
   894 00:0608: D0 F7        				BNE dloop1
   895 00:060A: 60           				RTS
   896                        				
   897                        ;-------------------------------------------------
                    ------------------------
   898                        ; printHex: Print a HEX value, the Woz way...
   899                        ;-------------------------------------------------
                    ------------------------
   900                        
   901                        sendHex
   902 00:060B: 48           				PHA			
                    	; Save A for LSD
   903 00:060C: 4A           				LSR
   904 00:060D: 4A           				LSR
   905 00:060E: 4A           				LSR			
                    	; MSD to LSD position
   906 00:060F: 4A           				LSR
   907 00:0610: 20 14 06     				JSR PRHEX2		
                    ; Output hex digit 
   908 00:0613: 68           				PLA			
                    	; Restore A
   909 00:0614: 29 0F        PRHEX2			AND #%00001111	; Mask L
                    SD for hex print			  
   910 00:0616: 09 30        				ORA #"0"		
                    ; Add "0"
   911 00:0618: C9 3A        				CMP #"9"+1		
                    ; Is it a decimal digit ?
   912 00:061A: 90 02        				BCC ECHO2		
                    ; Yes Output it
   913 00:061C: 69 06        				ADC #6			
                    ; Add offset for letter A-F
   914 00:061E: 20 EA 05     ECHO2			JSR sendChar	; Print 
                    it...
  Thu Feb  4 2016 18:05                                                Page 24

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

   915 00:0621: 60           				RTS
   916                        
   917                        ;-------------------------------------------------
                    ------------------------
   918                        ; printString: Print a String 
   919                        ;-------------------------------------------------
                    ------------------------				
   920                        				
   921                        sendString
   922 00:0622: A0 00        				LDY #0
   923 00:0624: B1 10        nextChar2		LDA (StringLo),Y	; Get ch
                    aracter
   924 00:0626: F0 06        				BEQ done_Printing2	
                    ; Zero, we done...
   925 00:0628: 20 EA 05     				JSR sendChar
   926 00:062B: C8           				INY			
                    		; Next, cannot print more than 254 bytes or we w
                    rap around in an infinite loop.
   927 00:062C: 80 F6        				BRA nextChar2		
                    ; Continue
   928 00:062E: 60           done_Printing2	RTS			
   929                        				
   930                        ;-------------------------------------------------
                    ------------------------
   931                        ; FUNCTION NAME	: Event Hander re-vectors
   932                        ;-------------------------------------------------
                    ------------------------
   933                        IRQHandler:
   934 00:062F: 48           				PHA
   935 00:0630: 68           				PLA
   936 00:0631: 40           				RTI
   937                        
   938                        badVec			; $FFE0 - IRQRVD2(134)
   939 00:0632: 08           				PHP
   940 00:0633: 48           				PHA
   941 00:0634: A9 FF        				LDA #$FF
   942                        				;clear Irq
   943 00:0636: 68           				PLA
   944 00:0637: 28           				PLP
   945 00:0638: 40           				RTI
   946                        
   947                        ;########################### Data segment ########
                    #############
   948                        
   949                        	DATA
   950                        
   951                        ;-------------------------------------------------
                    ------------------------
   952                        ; The Keyboard Matrix mapped to chars, for control
                     chars, I'll use ?...
   953                        ;-------------------------------------------------
                    ------------------------
   954                        keyMatrixMap
   955 00:0000: 31           				BYTE "1" ; 00
   956 00:0001: 4C           				BYTE "L" ; 01 Left arrow
  Thu Feb  4 2016 18:05                                                Page 25

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

   957 00:0002: 3F           				BYTE "?" ; 02 CTRL
   958 00:0003: 3F           				BYTE "?" ; 03 Stop
   959 00:0004: 20           				BYTE " " ; 04 Space
   960 00:0005: 43           				BYTE "C" ; 05 Commodore 
                    key
   961 00:0006: 51           				BYTE "Q" ; 06
   962 00:0007: 32           				BYTE "2" ; 07
   963                        				
   964 00:0008: 33           				BYTE "3" ; 08
   965 00:0009: 57           				BYTE "W" ; 09 
   966 00:000A: 41           				BYTE "A" ; 0A 
   967 00:000B: 3F           				BYTE "?" ; 0B Shift
   968 00:000C: 5A           				BYTE "Z" ; 0C 
   969 00:000D: 53           				BYTE "S" ; 0D
   970 00:000E: 45           				BYTE "E" ; 0E
   971 00:000F: 34           				BYTE "4" ; 0F
   972                        	
   973 00:0010: 35           				BYTE "5" ; 10
   974 00:0011: 52           				BYTE "R" ; 11
   975 00:0012: 44           				BYTE "D" ; 12
   976 00:0013: 58           				BYTE "X" ; 13
   977 00:0014: 43           				BYTE "C" ; 14
   978 00:0015: 46           				BYTE "F" ; 15
   979 00:0016: 54           				BYTE "T" ; 16
   980 00:0017: 36           				BYTE "6" ; 17
   981                        				
   982 00:0018: 37           				BYTE "7" ; 18
   983 00:0019: 59           				BYTE "Y" ; 19 
   984 00:001A: 47           				BYTE "G" ; 1A 
   985 00:001B: 56           				BYTE "V" ; 1B
   986 00:001C: 42           				BYTE "B" ; 1C
   987 00:001D: 48           				BYTE "H" ; 1D
   988 00:001E: 55           				BYTE "U" ; 1E
   989 00:001F: 38           				BYTE "8" ; 1F
   990                        	
   991 00:0020: 39           				BYTE "9" ; 20
   992 00:0021: 49           				BYTE "I" ; 21
   993 00:0022: 4A           				BYTE "J" ; 22
   994 00:0023: 4E           				BYTE "N" ; 23
   995 00:0024: 4D           				BYTE "M" ; 24
   996 00:0025: 4B           				BYTE "K" ; 25
   997 00:0026: 4F           				BYTE "O" ; 26
   998 00:0027: 30           				BYTE "0" ; 27
   999                        				
  1000 00:0028: 2B           				BYTE "+" ; 28
  1001 00:0029: 50           				BYTE "P" ; 29 
  1002 00:002A: 4C           				BYTE "L" ; 2A 
  1003 00:002B: 2C           				BYTE "," ; 2B
  1004 00:002C: 2E           				BYTE "." ; 2C
  1005 00:002D: 3A           				BYTE ":" ; 2D
  1006 00:002E: 40           				BYTE "@" ; 2E
  1007 00:002F: 2D           				BYTE "-" ; 2F
  1008                        	
  1009 00:0030: 50           				BYTE "P" ; 30 Pound sign
  1010 00:0031: 2A           				BYTE "*" ; 31
  Thu Feb  4 2016 18:05                                                Page 26

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

  1011 00:0032: 3B           				BYTE $3B ; 32 Semicolon
  1012 00:0033: 2F           				BYTE "/" ; 33
  1013 00:0034: 3F           				BYTE "?" ; 34 Shift
  1014 00:0035: 3D           				BYTE "=" ; 35
  1015 00:0036: 55           				BYTE "U" ; 36 Up arrow
  1016 00:0037: 3F           				BYTE "?" ; 37 CLR
  1017                        				
  1018 00:0038: 3F           				BYTE "?" ; 38 DEL
  1019 00:0039: 3F           				BYTE "?" ; 39 Return
  1020 00:003A: 3F           				BYTE "?" ; 3A Left Right
                     Arrow
  1021 00:003B: 3F           				BYTE "?" ; 3B Up Down Ar
                    row
  1022 00:003C: 31           				BYTE "1" ; 3C F1
  1023 00:003D: 33           				BYTE "3" ; 3D F3 
  1024 00:003E: 35           				BYTE "5" ; 3E F5
  1025 00:003F: 37           				BYTE "7" ; 3F F7
  1026                        	
  1027                        String1
  1028 00:0040: 0F 20 20 20  				BYTE	15, "         ZE
                    BERPUPIN W65C816SXB         ", 15, $00
       00:0044: 20 20 20 20 
       00:0048: 20 20 5A 45 
       00:004C: 42 45 52 50 
       00:0050: 55 50 49 4E 
       00:0054: 20 57 36 35 
       00:0058: 43 38 31 36 
       00:005C: 53 58 42 20 
       00:0060: 20 20 20 20 
       00:0064: 20 20 20 20 
       00:0068: 0F 00 
  1029 00:006A: 0F 57 36 35  				BYTE	15, "W65CSXB Key
                    board, VGA and SID system...", 15, $00
       00:006E: 43 53 58 42 
       00:0072: 20 4B 65 79 
       00:0076: 62 6F 61 72 
       00:007A: 64 2C 20 56 
       00:007E: 47 41 20 61 
       00:0082: 6E 64 20 53 
       00:0086: 49 44 20 73 
       00:008A: 79 73 74 65 
       00:008E: 6D 2E 2E 2E 
       00:0092: 0F 00 
  1030                        				
  1031                        String2
  1032 00:0094: 53 74 61 74  				BYTE	"Status Keys:   
                           Keyboard Matrix:  ", $00
       00:0098: 75 73 20 4B 
       00:009C: 65 79 73 3A 
       00:00A0: 20 20 20 20 
       00:00A4: 20 20 20 20 
       00:00A8: 20 20 4B 65 
       00:00AC: 79 62 6F 61 
       00:00B0: 72 64 20 4D 
       00:00B4: 61 74 72 69 
  Thu Feb  4 2016 18:05                                                Page 27

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

       00:00B8: 78 3A 20 20 
       00:00BC: 00 
  1033                        String3
  1034 00:00BD: 04 20 54 65  				BYTE	4, " Testing sel
                    ection 1", $00
       00:00C1: 73 74 69 6E 
       00:00C5: 67 20 73 65 
       00:00C9: 6C 65 63 74 
       00:00CD: 69 6F 6E 20 
       00:00D1: 31 00 
  1035                        String4
  1036 00:00D3: 05 20 54 65  				BYTE	5, " Testing sel
                    ection 2", $00
       00:00D7: 73 74 69 6E 
       00:00DB: 67 20 73 65 
       00:00DF: 6C 65 63 74 
       00:00E3: 69 6F 6E 20 
       00:00E7: 32 00 
  1037                        			
  1038 00:00E9:              	ENDS
  1039                        
  1040                        ;-----------------------------
  1041                        ;
  1042                        ;		Reset and Interrupt Vectors (define for 
                    265, 816/02 are subsets)
  1043                        ;
  1044                        ;-----------------------------
  1045                        
  1046                        Shadow_VECTORS	SECTION OFFSET $7EE0
  1047                        							
                    	;65C816 Interrupt Vectors
  1048                        							
                    	;Status bit E = 0 (Native mode, 16 bit mode)
  1049 00:7EE0: 32 06        				DW badVec		
                    ; $FFE0 - IRQRVD4(816)
  1050 00:7EE2: 32 06        				DW badVec		
                    ; $FFE2 - IRQRVD5(816)
  1051 00:7EE4: 32 06        				DW badVec		
                    ; $FFE4 - COP(816)
  1052 00:7EE6: 32 06        				DW badVec		
                    ; $FFE6 - BRK(816)
  1053 00:7EE8: 32 06        				DW badVec		
                    ; $FFE8 - ABORT(816)
  1054 00:7EEA: 32 06        				DW badVec		
                    ; $FFEA - NMI(816)
  1055 00:7EEC: 32 06        				DW badVec		
                    ; $FFEC - IRQRVD(816)
  1056 00:7EEE: 32 06        				DW badVec		
                    ; $FFEE - IRQ(816)
  1057                        							
                    	;Status bit E = 1 (Emulation mode, 8 bit mode)
  1058 00:7EF0: 32 06        				DW badVec		
                    ; $FFF0 - IRQRVD2(8 bit Emulation)(IRQRVD(265))
  1059 00:7EF2: 32 06        				DW badVec		
                    ; $FFF2 - IRQRVD1(8 bit Emulation)(IRQRVD(265))
  Thu Feb  4 2016 18:05                                                Page 28

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

  1060 00:7EF4: 32 06        				DW badVec		
                    ; $FFF4 - COP(8 bit Emulation)
  1061 00:7EF6: 32 06        				DW badVec   	; $FFF6 
                    - IRQRVD0(8 bit Emulation)(IRQRVD(265))
  1062 00:7EF8: 32 06        				DW badVec		
                    ; $FFF8 - ABORT(8 bit Emulation)
  1063                        							
                    	; Common 8 bit Vectors for all CPUs
  1064 00:7EFA: 32 06        				DW badVec		
                    ; $FFFA -  NMIRQ (ALL)
  1065 00:7EFC: 00 02        				DW START		
                    ; $FFFC -  RESET (ALL)
  1066 00:7EFE: 2F 06        				DW IRQHandler	; $FFFE 
                    -  IRQBRK (ALL)
  1067 00:7F00:              	ENDS
  1068                        
  1069                        vectors	SECTION OFFSET $FFE0
  1070                        							
                    	;65C816 Interrupt Vectors
  1071                        							
                    	;Status bit E = 0 (Native mode, 16 bit mode)
  1072 00:FFE0: 32 06        				DW badVec		
                    ; $FFE0 - IRQRVD4(816)
  1073 00:FFE2: 32 06        				DW badVec		
                    ; $FFE2 - IRQRVD5(816)
  1074 00:FFE4: 32 06        				DW badVec		
                    ; $FFE4 - COP(816)
  1075 00:FFE6: 32 06        				DW badVec		
                    ; $FFE6 - BRK(816)
  1076 00:FFE8: 32 06        				DW badVec		
                    ; $FFE8 - ABORT(816)
  1077 00:FFEA: 32 06        				DW badVec		
                    ; $FFEA - NMI(816)
  1078 00:FFEC: 32 06        				DW badVec		
                    ; $FFEC - IRQRVD(816)
  1079 00:FFEE: 32 06        				DW badVec		
                    ; $FFEE - IRQ(816)
  1080                        							
                    	;Status bit E = 1 (Emulation mode, 8 bit mode)
  1081 00:FFF0: 32 06        				DW badVec		
                    ; $FFF0 - IRQRVD2(8 bit Emulation)(IRQRVD(265))
  1082 00:FFF2: 32 06        				DW badVec		
                    ; $FFF2 - IRQRVD1(8 bit Emulation)(IRQRVD(265))
  1083 00:FFF4: 32 06        				DW badVec		
                    ; $FFF4 - COP(8 bit Emulation)
  1084 00:FFF6: 32 06        				DW badVec		
                    ; $FFF6 - IRQRVD0(8 bit Emulation)(IRQRVD(265))
  1085 00:FFF8: 32 06        				DW badVec		
                    ; $FFF8 - ABORT(8 bit Emulation)
  1086                        							
                    	; Common 8 bit Vectors for all CPUs
  1087 00:FFFA: 32 06        				DW badVec		
                    ; $FFFA -  NMIRQ (ALL)
  1088 00:FFFC: 00 02        				DW START		
                    ; $FFFC -  RESET (ALL)
  Thu Feb  4 2016 18:05                                                Page 29

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

  1089 00:FFFE: 2F 06        				DW IRQHandler	; $FFFE 
                    -  IRQBRK (ALL)
  1090 01:0000:              	ENDS
  1091                        	END


      Lines assembled: 1091
      Errors: 0
