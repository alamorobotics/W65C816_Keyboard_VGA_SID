  Mon Jan 25 2016 12:10                                                Page 1

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    

                     ***************************************
                     **      WDC 65C816 Macro Assembler   **
                     **                                   **
                     **     Version 3.49.1- Feb  6 2006    **
                     ***************************************

     1                        ; File: W65C816_Keyboard_VGA_SID_01.asm
     2                        ; 12/26/2015
     3                        
     4                        ;############################# DESCIPTION ########
                    ################
     5                        
     6                        ; This poject will add a couple of W65C22 VIAs to 
                    read a
     7                        ; Commodore 64 keyboard and interface with a prope
                    ller for VGA and SID emulation.
     8                        
     9                        ; So far I have hooked up the first extra VIA and 
                    mapped it to $7F00.
    10                        ;
    11                        
    12                        ;#################################################
                    ################
    13                        
    14                        	PW 80          ;Page Width (# of char/line)
    15                        	PL 60          ;Page Length for HP Laser
    16                        	INCLIST ON     ;Add Include files in Listing
    17                        
    18                        ;*********************************************
    19                        ;Test for Valid Processor defined in -D option
    20                        ;*********************************************
    21                        	IF USING_816
    22                        	ELSE
    23                        		EXIT  "Not Valid Processor: Use -DUSING_
                    02, etc."
    24                        	ENDIF
    25                        
    26                        	TITLE  "W65C816_Keyboard_VGA_SID W65C816_Keyboar
                    d_VGA_SID_01.asm"
    27                        	STTL
    28                        
    29                        ;########################### I/O addreses ########
                    #############
    30                        	
    31             00007F00   VIA_KEY_BASE	EQU $7F00		; base a
                    ddress of extra VIA on SXB used for the Keyboard
    32             00007F00   VIA_KEY_ORB		EQU VIA_KEY_BASE
    33             00007F00   VIA_KEY_IRB		EQU VIA_KEY_BASE
    34             00007F01   VIA_KEY_ORA		EQU VIA_KEY_BASE+1
    35             00007F01   VIA_KEY_IRA		EQU VIA_KEY_BASE+1
    36             00007F02   VIA_KEY_DDRB	EQU VIA_KEY_BASE+2
    37             00007F03   VIA_KEY_DDRA	EQU VIA_KEY_BASE+3
    38             00007F04   VIA_KEY_T1CLO	EQU VIA_KEY_BASE+4
    39             00007F05   VIA_KEY_T1CHI	EQU VIA_KEY_BASE+5
    40             00007F06   VIA_KEY_T1LLO	EQU VIA_KEY_BASE+6
  Mon Jan 25 2016 12:10                                                Page 2

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    

    41             00007F07   VIA_KEY_T1LHI	EQU VIA_KEY_BASE+7
    42             00007F08   VIA_KEY_T2CLO	EQU VIA_KEY_BASE+8
    43             00007F09   VIA_KEY_T2CHI	EQU VIA_KEY_BASE+9
    44             00007F0A   VIA_KEY_SR		EQU VIA_KEY_BASE+10
    45             00007F0B   VIA_KEY_ACR		EQU VIA_KEY_BASE+11
    46             00007F0C   VIA_KEY_PCR		EQU VIA_KEY_BASE+12
    47             00007F0D   VIA_KEY_IFR		EQU VIA_KEY_BASE+13
    48             00007F0E   VIA_KEY_IER		EQU VIA_KEY_BASE+14
    49             00007F0F   VIA_KEY_ORANH	EQU VIA_KEY_BASE+15
    50             00007F0F   VIA_KEY_IRANH	EQU VIA_KEY_BASE+15
    51                        
    52             00007FC0   VIA_BASE		EQU $7FC0		; base a
                    ddress of VIA port on SXB
    53             00007FC0   VIA_ORB			EQU VIA_BASE
    54             00007FC0   VIA_IRB			EQU VIA_BASE
    55             00007FC1   VIA_ORA			EQU VIA_BASE+1
    56             00007FC1   VIA_IRA			EQU VIA_BASE+1
    57             00007FC2   VIA_DDRB		EQU VIA_BASE+2
    58             00007FC3   VIA_DDRA		EQU VIA_BASE+3
    59             00007FC4   VIA_T1CLO		EQU VIA_BASE+4
    60             00007FC5   VIA_T1CHI		EQU VIA_BASE+5
    61             00007FC6   VIA_T1LLO		EQU VIA_BASE+6
    62             00007FC7   VIA_T1LHI		EQU VIA_BASE+7
    63             00007FC8   VIA_T2CLO		EQU VIA_BASE+8
    64             00007FC9   VIA_T2CHI		EQU VIA_BASE+9
    65             00007FCA   VIA_SR			EQU VIA_BASE+10
    66             00007FCB   VIA_ACR			EQU VIA_BASE+11
    67             00007FCC   VIA_PCR			EQU VIA_BASE+12
    68             00007FCD   VIA_IFR			EQU VIA_BASE+13
    69             00007FCE   VIA_IER			EQU VIA_BASE+14
    70             00007FCF   VIA_ORANH		EQU VIA_BASE+15
    71             00007FCF   VIA_IRANH		EQU VIA_BASE+15
    72                        
    73             00007FA0   PIA_BASE		EQU $7FA0		; base a
                    ddress of PIA port on SXB
    74             00007FA0   PIA_ORA			EQU PIA_BASE
    75             00007FA0   PIA_IRA			EQU PIA_BASE
    76             00007FA0   PIA_DDRA		EQU PIA_BASE
    77             00007FA1   PIA_CTRLA		EQU PIA_BASE+1
    78             00007FA2   PIA_ORB			EQU PIA_BASE+2
    79             00007FA2   PIA_IRB			EQU PIA_BASE+2
    80             00007FA2   PIA_DDRB		EQU PIA_BASE+2
    81             00007FA3   PIA_CTRLB		EQU PIA_BASE+3
    82                        
    83             00007F80   ACIA_BASE		EQU $7F80		; base a
                    ddress of ACIA on SXB
    84             00007F80   ACIA_RXD		EQU ACIA_BASE
    85             00007F80   ACIA_TXD        EQU ACIA_BASE
    86             00007F81   ACIA_SR         EQU ACIA_BASE+1
    87             00007F82   ACIA_CMD        EQU ACIA_BASE+2
    88             00007F83   ACIA_CTL        EQU ACIA_BASE+3
    89                        
    90                        ;########################### Propeller addreses ##
                    ###################
    91                        
  Mon Jan 25 2016 12:10                                                Page 3

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    

    92             00000000   VGA_BASE		EQU $00			; "base 
                    address" of VGA, this address is sent to the propeller
    93             00000000   VGA_PRINT		EQU VGA_BASE
    94             00000001   VGA_COL			EQU VGA_BASE+$01
    95             00000002   VGA_ROW			EQU VGA_BASE+$02
    96             00000003   VGA_ROW_COLOR	EQU VGA_BASE+$03
    97             00000004   VGA_ROW_BACK	EQU VGA_BASE+$04
    98             00000005   VGA_AUTO_INC	EQU VGA_BASE+$05
    99             00000006   VGA_FILL_CHAR	EQU VGA_BASE+$06
   100             00000007   VGA_FILL_COL	EQU VGA_BASE+$07
   101             00000008   VGA_FILL_BACK	EQU VGA_BASE+$08
   102             00000009   VGA_SCROLL_UP	EQU VGA_BASE+$09
   103             0000000A   VGA_SCROLL_DN	EQU VGA_BASE+$0A
   104                        
   105             00000010   VGA_CUR1_X		EQU VGA_BASE+$10
   106             00000011   VGA_CUR1_Y		EQU VGA_BASE+$11
   107             00000012   VGA_CUR1_MODE	EQU VGA_BASE+$12
   108             00000013   VGA_CUR2_X		EQU VGA_BASE+$13
   109             00000014   VGA_CUR2_Y		EQU VGA_BASE+$14
   110             00000015   VGA_CUR2_MODE	EQU VGA_BASE+$15
   111                        
   112             00000020   SID_BASE		EQU $20		; "base address"
                     of SID emulation, this address is sent to the propeller
   113             00000020   SID_FR1LO		EQU SID_BASE
   114             00000021   SID_FR1HI		EQU SID_BASE+$01
   115             00000022   SID_PW1LO		EQU SID_BASE+$02
   116             00000023   SID_PW1HI		EQU SID_BASE+$03
   117             00000024   SID_CR1			EQU SID_BASE+$04
   118             00000025   SID_AD1			EQU SID_BASE+$05
   119             00000026   SID_SR1			EQU SID_BASE+$06
   120                        
   121             00000027   SID_FR2LO		EQU SID_BASE+$07
   122             00000028   SID_FR2HI		EQU SID_BASE+$08
   123             00000029   SID_PW2LO		EQU SID_BASE+$09
   124             0000002A   SID_PW2HI		EQU SID_BASE+$0A
   125             0000002B   SID_CR2			EQU SID_BASE+$0B
   126             0000002C   SID_AD2			EQU SID_BASE+$0C
   127             0000002D   SID_SR2			EQU SID_BASE+$0D
   128                        
   129             0000002E   SID_FR3LO		EQU SID_BASE+$0E
   130             0000002F   SID_FR3HI		EQU SID_BASE+$0F
   131             00000030   SID_PW3LO		EQU SID_BASE+$10
   132             00000031   SID_PW3HI		EQU SID_BASE+$11
   133             00000032   SID_CR3			EQU SID_BASE+$12
   134             00000033   SID_AD3			EQU SID_BASE+$13
   135             00000034   SID_SR3			EQU SID_BASE+$14
   136                        
   137             00000035   SID_FCLO		EQU SID_BASE+$15
   138             00000036   SID_FCHI		EQU SID_BASE+$16
   139             00000037   SID_RESFIL		EQU SID_BASE+$17
   140             00000038   SID_MODVOL		EQU SID_BASE+$18
   141                        
   142                        ;########################### Zero Page ###########
                    ##########
   143                        
  Mon Jan 25 2016 12:10                                                Page 4

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    

   144                        ; String Pointers
   145             00000010   StringLo		EQU $10 ; Low pointer
   146             00000011   StringHi		EQU $11 ; High pointer
   147                        
   148             00000020   KeyMapLo		EQU $20 ; Low pointer
   149             00000021   KeyMapHi		EQU $21 ; High pointer
   150             00000022   KeyRow00		EQU $22 ; Keyboard Matrix row 0
   151             00000023   KeyRow01		EQU $23 ; Keyboard Matrix row 1
   152             00000024   KeyRow02		EQU $24 ; Keyboard Matrix row 2
   153             00000025   KeyRow03		EQU $25 ; Keyboard Matrix row 3
   154             00000026   KeyRow04		EQU $26 ; Keyboard Matrix row 4
   155             00000027   KeyRow05		EQU $27 ; Keyboard Matrix row 5
   156             00000028   KeyRow06		EQU $28 ; Keyboard Matrix row 6
   157             00000029   KeyRow07		EQU $29 ; Keyboard Matrix row 7
   158             0000002A   KeyBitpos		EQU $2A	; Current bit Position
   159             0000002B   KeyMatrixpos	EQU $2B	; Current Position in Ma
                    trix
   160             0000002C   KeyCTRLKeys		EQU $2C ; Conntrol keys:
                     L Shift, CTRL, Run/Stop, R Shift, Commodore. L Shift is als
                    o Shift Lock.
   161             0000002D   KeyRaw			EQU $2D ; Raw value 0-63
                    , , if no key pressed, 128...
   162             0000002E   KeyCoded		EQU $2E ; ASCII encoded Value
   163             0000002F   KeyPrevious		EQU $2F ; Raw previous v
                    alue, if no key pressed, 128...
   164                        
   165                        ;########################### Main Program ########
                    #############
   166                        
   167                        	CHIP 65C02
   168                        	LONGI OFF
   169                        	LONGA OFF
   170                        
   171                        	.STTL "W65C816_Keyboard_VGA_SID"
   172                        	.PAGE
   173                        				ORG $0200
  Mon Jan 25 2016 12:10                                                Page 5

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

   174                        START
   175                        
   176 00:0200: 20 48 02     				JSR init_ACIA		
                    	; Init ACIA
   177 00:0203: 20 5F 02     				JSR	init_Keyboard	
                    	; Setup Keyboard and VIA_KEY
   178                        				
   179 00:0206: A9 xx        				LDA #<String1     	
                    	; Load String Pointers.
   180 00:0208: 85 10        				STA StringLo
   181 00:020A: A9 xx        				LDA #>String1
   182 00:020C: 85 11        				STA StringHi		
                    		
   183 00:020E: 20 27 03     				JSR printString
   184 00:0211: 20 2A 02     				JSR print_NewLine
   185                        
   186                        MAINLOOP
   187                        				
   188 00:0214: 20 6B 02     				JSR read_Keyboard
   189                        				
   190 00:0217: A5 2D        				LDA KeyRaw		
                    		; Load raw char
   191 00:0219: 30 09        				BMI no_key_pressed	
                    	; Pressed ?
   192 00:021B: C5 2F        				CMP KeyPrevious		
                    	; Same as previous ?
   193 00:021D: F0 05        				BEQ no_key_pressed	
                    	; Then don't print
   194 00:021F: A5 2E        				LDA KeyCoded		
                    	; Get mapped key
   195 00:0221: 20 EF 02     				JSR sendChar		
                    	; Send it
   196                        				
   197                        no_key_pressed				
   198 00:0224: 20 00 03     				JSR delay
   199 00:0227: 4C 14 02     				JMP MAINLOOP
   200                        				
   201                        print_NewLine
   202 00:022A: A9 0C        				LDA #$0C
   203 00:022C: 20 EF 02     				JSR sendChar
   204 00:022F: A9 0D        				LDA #$0D
   205 00:0231: 20 EF 02     				JSR sendChar
   206 00:0234: 60           				RTS
   207                        				
   208                        				
   209                        ;-------------------------------------------------
                    ------------------------
   210                        ; init_Key_VIA: init VIA for Keyboard
   211                        ;-------------------------------------------------
                    ------------------------				
   212                        				
   213                        init_Key_VIA
   214 00:0235: A9 FF        				LDA #$FF
   215 00:0237: 8D 03 7F     				STA VIA_KEY_DDRA	
                    ; Make Port A output.
  Mon Jan 25 2016 12:10                                                Page 6

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

   216 00:023A: 9C 02 7F     				STZ VIA_KEY_DDRB	
                    ; Make Port B input.
   217                        
   218 00:023D: AD 0B 7F     				LDA VIA_KEY_ACR     ; Lo
                    ad ACR
   219 00:0240: 29 E3        				AND #$E3            ; Ze
                    ro bit 4,3,2.
   220 00:0242: 09 08        				ORA #$08            ; Sh
                    ift in using Phi2 ($08).
   221 00:0244: 8D 0B 7F     				STA VIA_KEY_ACR
   222 00:0247: 60           				RTS
   223                        
   224                        ;-------------------------------------------------
                    ------------------------
   225                        ; init_ACIA: init ACIA
   226                        ;-------------------------------------------------
                    ------------------------				
   227                        				
   228                        init_ACIA				
   229 00:0248: 9C 82 7F                     STZ     ACIA_CMD                ; C
                    onfigure ACIA
   230 00:024B: 9C 83 7F                     STZ     ACIA_CTL
   231 00:024E: 9C 81 7F                     STZ     ACIA_SR
   232                        
   233 00:0251: A9 10                        LDA     #%00010000              ; 8
                     bits, 1 stop bit, full baud ahead.
   234 00:0253: 8D 83 7F                     STA     ACIA_CTL
   235 00:0256: A9 C9                        LDA     #%11001001              ; N
                    o parity, no interrupt
   236 00:0258: 8D 82 7F                     STA     ACIA_CMD
   237 00:025B: AD 80 7F                     LDA     ACIA_RXD                ; C
                    lear receive buffer				
   238 00:025E: 60           				RTS
   239                        
   240                        ;-------------------------------------------------
                    ------------------------
   241                        ; init_Keyboard: Setup Keyboard to be read.
   242                        ;-------------------------------------------------
                    ------------------------				
   243                        
   244                        init_Keyboard				
   245 00:025F: A9 xx        				LDA #<keyMatrixMap     	
                    	; Load String Pointers.
   246 00:0261: 85 20        				STA KeyMapLo
   247 00:0263: A9 xx        				LDA #>keyMatrixMap
   248 00:0265: 85 21        				STA KeyMapHi
   249 00:0267: 20 35 02     				JSR init_Key_VIA	
                    		; Init VIA
   250 00:026A: 60           				RTS
   251                        				
   252                        ;-------------------------------------------------
                    ------------------------
   253                        ; read_Keyboard: Read the C64 Keyboard
   254                        ;-------------------------------------------------
                    ------------------------				
  Mon Jan 25 2016 12:10                                                Page 7

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

   255                        				
   256                        read_Keyboard	
   257 00:026B: 20 72 02     				JSR read_KeyMatrix
   258 00:026E: 20 8D 02     				JSR encode_Keyboard
   259 00:0271: 60           				RTS
   260                        
   261                        ;-------------------------------------------------
                    ------------------------
   262                        ; read_KeyMatrix: Read the Key Matrix
   263                        ;-------------------------------------------------
                    ------------------------				
   264                        
   265                        read_KeyMatrix
   266 00:0272: A9 01        				LDA #$01		
                    	; Start with bit 1
   267 00:0274: 85 2A        				STA KeyBitpos		
                    ; Save position
   268 00:0276: A2 00        				LDX #00			
                    	; Zero X
   269 00:0278: A5 2A        bitLoop			LDA KeyBitpos		
                    ; First bits
   270 00:027A: 8D 01 7F     				STA VIA_KEY_ORA		
                    ; Set Matrix
   271 00:027D: EA           				NOP			
                    		; Wait for value to be stable
   272 00:027E: EA           				NOP
   273 00:027F: EA           				NOP			
                    		; Wait for it...
   274 00:0280: EA           				NOP			
                    		; Should be stable by now...
   275 00:0281: AD 00 7F     				LDA VIA_KEY_IRB		
                    ; Read Matrix byte
   276 00:0284: 95 22        				STA KeyRow00, X		
                    ; Save data in position relative to X
   277 00:0286: E8           				INX			
                    		; Next save position
   278 00:0287: 18           				CLC			
                    		; Clear Carry
   279 00:0288: 26 2A        				ROL KeyBitpos		
                    ; Roll position left, the bit is now pointing to the next ro
                    w in the Keyboard matrix
   280 00:028A: 90 EC        				BCC bitLoop		
                    	; Are we done yet ? If Carry was shifted out, nothing mo
                    re to read.
   281 00:028C: 60           				RTS
   282                        				
   283                        ;-------------------------------------------------
                    ------------------------
   284                        ; encode_Keyboard: Read the C64 Keyboard
   285                        ;-------------------------------------------------
                    ------------------------				
   286                        				
   287                        encode_Keyboard	
   288                        
   289 00:028D: A5 2D        				LDA KeyRaw		
  Mon Jan 25 2016 12:10                                                Page 8

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

                    	; Exchange Previous key.
   290 00:028F: 85 2F        				STA KeyPrevious
   291                        
   292 00:0291: AD 0A 7F     				LDA VIA_KEY_SR		
                    ; Read Restore Key.
   293                        				; Reading the SR registe
                    r starts a shift in, the restore key is hooked up to CB2
   294                        				
   295 00:0294: A5 22        				LDA KeyRow00		
                    ; Top Matrix row.
   296 00:0296: 29 2C        				AND #%00101100		
                    ; Filter out CTRL, Stop and Commodore key, we only want thes
                    e bits
   297 00:0298: 85 2C        				STA KeyCTRLKeys		
                    ; Save it
   298 00:029A: A5 22        				LDA KeyRow00		
                    ; Top Matrix row.
   299 00:029C: 29 D3        				AND #%11010011		
                    ; Remove CTRL, Stop and Commodore key since we are done with
                     them.
   300 00:029E: 85 22        				STA KeyRow00		
                    ; Save it
   301                        				
   302 00:02A0: A5 23        				LDA KeyRow01		
                    ; Second Matrix row.
   303 00:02A2: 29 08        				AND #%00001000		
                    ; Filter out Left Shift
   304 00:02A4: 18           				CLC			
                    		; Clear carry for Rotate
   305 00:02A5: 6A           				ROR			
                    		; Shift bit twice so it does not collide with ot
                    her bits
   306 00:02A6: 6A           				ROR
   307 00:02A7: 05 2C        				ORA KeyCTRLKeys		
                    ; Ora with previous result
   308 00:02A9: 85 2C        				STA KeyCTRLKeys		
                    ; Save
   309 00:02AB: A5 23        				LDA KeyRow01		
                    ; Second Matrix row.
   310 00:02AD: 29 F7        				AND #%11110111		
                    ; Remove Left Shift since we are done with it.
   311 00:02AF: 85 23        				STA KeyRow01		
                    ; Save it
   312                        
   313 00:02B1: A5 28        				LDA KeyRow06		
                    ; Sixth Matrix row.
   314 00:02B3: 29 10        				AND #%00010000		
                    ; Filter out Right Shift
   315 00:02B5: 05 2C        				ORA KeyCTRLKeys		
                    ; Ora with previous result
   316 00:02B7: 85 2C        				STA KeyCTRLKeys		
                    ; Save
   317 00:02B9: A5 28        				LDA KeyRow06		
                    ; Sixth Matrix row.
   318 00:02BB: 29 EF        				AND #%11101111		
  Mon Jan 25 2016 12:10                                                Page 9

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

                    ; Remove Right Shift since we are done with it.
   319 00:02BD: 85 28        				STA KeyRow06		
                    ; Save it
   320                        				
   321 00:02BF: AD 0A 7F     				LDA VIA_KEY_SR		
                    ; Restore Key should be done by now. Get actual value.
   322 00:02C2: 29 01        				AND #%00000001		
                    ; Filter out one bit.
   323 00:02C4: 05 2C        				ORA KeyCTRLKeys		
                    ; Ora with previous result
   324 00:02C6: 85 2C        				STA KeyCTRLKeys		
                    ; Save
   325                        				
   326                        				; Control keys, 
   327                        				; Bit 1: Restore
   328                        				; Bit 2: Left Shift, Shi
                    ft Lock
   329                        				; Bit 3: CTRL
   330                        				; Bit 4: Run Stop
   331                        				; BIT 5: Right Shift
   332                        				; Bit 6: Commodore key
   333                        				
   334 00:02C8: A0 00        				LDY #$00		
                    	; Zero Y, this is position 0-7 in bits.
   335 00:02CA: A2 00        				LDX #$00		
                    	; Zero X, this is the current Matrix byte
   336 00:02CC: 64 2B        				STZ KeyMatrixpos	
                    ; Zero matrix position				
   337 00:02CE: 76 22        bitLoop2		ROR KeyRow00, X		; Shift 
                    Matrix data, test first bit.
   338 00:02D0: 90 0A        				BCC	no_key_press    
                    ; No key pressed
   339 00:02D2: A4 2B        				LDY KeyMatrixpos	
                    ; Get position
   340 00:02D4: 84 2D        				STY KeyRaw		
                    	; Save raw key value
   341 00:02D6: B1 20        				LDA (KeyMapLo), Y	
                    ; Look up actual character
   342 00:02D8: 85 2E        				STA KeyCoded		
                    ; Save coded key.
   343 00:02DA: 80 12        				BRA done_encoding	
                    ; We are done.
   344 00:02DC: E6 2B        no_key_press	INC KeyMatrixpos	; Next p
                    os in matrix
   345 00:02DE: C8           				INY			
                    		; Next current bit pos.
   346 00:02DF: C0 08        				CPY #8			
                    	; Done yet ?
   347 00:02E1: D0 EB        				BNE bitLoop2		
                    ; Continue on...
   348 00:02E3: A0 00        				LDY #$00		
                    	; Reset bit position
   349 00:02E5: E8           				INX			
                    		; Next Matrix  position
   350 00:02E6: E0 08        				CPX #8			
  Mon Jan 25 2016 12:10                                                Page 10

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

                    	; Done yet ?
   351 00:02E8: D0 E4        				BNE bitLoop2		
                    ; Continue on
   352                        				
   353 00:02EA: A9 80        				LDA #$80		
                    	; Flag no key pressed.
   354 00:02EC: 85 2D        				STA KeyRaw		
                    	; Save it
   355                        done_encoding
   356 00:02EE: 60           				RTS
   357                        				
   358                        ;-------------------------------------------------
                    ------------------------
   359                        ; printString: Print a String 
   360                        ;-------------------------------------------------
                    ------------------------				
   361                        				
   362                        sendChar
   363 00:02EF: 48           				PHA
   364 00:02F0: 08           				PHP
   365 00:02F1: 8D 80 7F     				STA ACIA_TXD
   366 00:02F4: 20 FA 02     				JSR TxDelay
   367 00:02F7: 28           				PLP
   368 00:02F8: 68           				PLA
   369 00:02F9: 60           				RTS
   370                        
   371                        ;-------------------------------------------------
                    ------------------------
   372                        ; TxDelay: Send delay
   373                        ;-------------------------------------------------
                    ------------------------				
   374                        				
   375                        TxDelay
   376 00:02FA: A9 60        				LDA #$60
   377 00:02FC: 1A           				INC
   378 00:02FD: D0 FD        				BNE $-1
   379 00:02FF: 60           				RTS
   380                        				
   381                        ;-------------------------------------------------
                    ------------------------
   382                        ; delay: Just a Delay
   383                        ;-------------------------------------------------
                    ------------------------				
   384                        
   385 00:0300: A9 08        delay			LDA #$08
   386 00:0302: A0 00        				LDY #$00            ; Lo
                    op 8*256*256 times...
   387 00:0304: A2 00        				LDX #$00
   388 00:0306: CA           dloop1			DEX
   389 00:0307: D0 FD        				BNE dloop1
   390 00:0309: 88           				DEY
   391 00:030A: D0 FA        				BNE dloop1
   392 00:030C: 3A           				DEC
   393 00:030D: D0 F7        				BNE dloop1
   394 00:030F: 60           				RTS
  Mon Jan 25 2016 12:10                                                Page 11

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

   395                        				
   396                        ;-------------------------------------------------
                    ------------------------
   397                        ; printHex: Print a HEX value, the Woz way...
   398                        ;-------------------------------------------------
                    ------------------------
   399                        
   400                        printHex
   401 00:0310: 48           				PHA			
                    	; Save A for LSD
   402 00:0311: 4A           				LSR
   403 00:0312: 4A           				LSR
   404 00:0313: 4A           				LSR			
                    	; MSD to LSD position
   405 00:0314: 4A           				LSR
   406 00:0315: 20 19 03     				JSR PRHEX		
                    ; Output hex digit 
   407 00:0318: 68           				PLA			
                    	; Restore A
   408 00:0319: 29 0F        PRHEX			AND #%00001111	; Mask L
                    SD for hex print			  
   409 00:031B: 09 30        				ORA #"0"		
                    ; Add "0"
   410 00:031D: C9 3A        				CMP #"9"+1		
                    ; Is it a decimal digit ?
   411 00:031F: 90 02        				BCC ECHO		
                    ; Yes Output it
   412 00:0321: 69 06        				ADC #6			
                    ; Add offset for letter A-F
   413 00:0323: 20 EF 02     ECHO			JSR sendChar	; Print 
                    it...
   414 00:0326: 60           				RTS
   415                        
   416                        ;-------------------------------------------------
                    ------------------------
   417                        ; printString: Print a String 
   418                        ;-------------------------------------------------
                    ------------------------				
   419                        				
   420                        printString
   421 00:0327: A0 00        				LDY #0
   422 00:0329: B1 10        nextChar		LDA (StringLo),Y	; Get ch
                    aracter
   423 00:032B: F0 06        				BEQ done_Printing	
                    ; Zero, we done...
   424 00:032D: 20 EF 02     				JSR sendChar
   425 00:0330: C8           				INY			
                    		; Next, cannot print more than 254 bytes or we w
                    rap around in an infinite loop.
   426 00:0331: 80 F6        				BRA nextChar		
                    ; Continue
   427 00:0333: 60           done_Printing	RTS			
   428                        				
   429                        ;-------------------------------------------------
                    ------------------------
  Mon Jan 25 2016 12:10                                                Page 12

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

   430                        ; FUNCTION NAME	: Event Hander re-vectors
   431                        ;-------------------------------------------------
                    ------------------------
   432                        IRQHandler:
   433 00:0334: 48           				PHA
   434 00:0335: 68           				PLA
   435 00:0336: 40           				RTI
   436                        
   437                        badVec			; $FFE0 - IRQRVD2(134)
   438 00:0337: 08           				PHP
   439 00:0338: 48           				PHA
   440 00:0339: A9 FF        				LDA #$FF
   441                        				;clear Irq
   442 00:033B: 68           				PLA
   443 00:033C: 28           				PLP
   444 00:033D: 40           				RTI
   445                        
   446                        ;########################### Data segment ########
                    #############
   447                        
   448                        	DATA
   449                        
   450                        ;-------------------------------------------------
                    ------------------------
   451                        ; The Keyboard Matrix mapped to chars, for control
                     chars, I'll use ?...
   452                        ;-------------------------------------------------
                    ------------------------
   453                        keyMatrixMap
   454 00:0000: 31           				BYTE "1" ; 00
   455 00:0001: 4C           				BYTE "L" ; 01 Left arrow
   456 00:0002: 3F           				BYTE "?" ; 02 CTRL
   457 00:0003: 3F           				BYTE "?" ; 03 Stop
   458 00:0004: 20           				BYTE " " ; 04 Space
   459 00:0005: 43           				BYTE "C" ; 05 Commodore 
                    key
   460 00:0006: 51           				BYTE "Q" ; 06
   461 00:0007: 32           				BYTE "2" ; 07
   462                        				
   463 00:0008: 33           				BYTE "3" ; 08
   464 00:0009: 57           				BYTE "W" ; 09 
   465 00:000A: 41           				BYTE "A" ; 0A 
   466 00:000B: 3F           				BYTE "?" ; 0B Shift
   467 00:000C: 5A           				BYTE "Z" ; 0C 
   468 00:000D: 53           				BYTE "S" ; 0D
   469 00:000E: 45           				BYTE "E" ; 0E
   470 00:000F: 34           				BYTE "4" ; 0F
   471                        	
   472 00:0010: 35           				BYTE "5" ; 10
   473 00:0011: 52           				BYTE "R" ; 11
   474 00:0012: 44           				BYTE "D" ; 12
   475 00:0013: 58           				BYTE "X" ; 13
   476 00:0014: 43           				BYTE "C" ; 14
   477 00:0015: 46           				BYTE "F" ; 15
   478 00:0016: 54           				BYTE "T" ; 16
  Mon Jan 25 2016 12:10                                                Page 13

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

   479 00:0017: 36           				BYTE "6" ; 17
   480                        				
   481 00:0018: 37           				BYTE "7" ; 18
   482 00:0019: 59           				BYTE "Y" ; 19 
   483 00:001A: 47           				BYTE "G" ; 1A 
   484 00:001B: 56           				BYTE "V" ; 1B
   485 00:001C: 42           				BYTE "B" ; 1C
   486 00:001D: 48           				BYTE "H" ; 1D
   487 00:001E: 55           				BYTE "U" ; 1E
   488 00:001F: 38           				BYTE "8" ; 1F
   489                        	
   490 00:0020: 39           				BYTE "9" ; 20
   491 00:0021: 49           				BYTE "I" ; 21
   492 00:0022: 4A           				BYTE "J" ; 22
   493 00:0023: 4E           				BYTE "N" ; 23
   494 00:0024: 4D           				BYTE "M" ; 24
   495 00:0025: 4B           				BYTE "K" ; 25
   496 00:0026: 4F           				BYTE "O" ; 26
   497 00:0027: 30           				BYTE "0" ; 27
   498                        				
   499 00:0028: 2B           				BYTE "+" ; 28
   500 00:0029: 50           				BYTE "P" ; 29 
   501 00:002A: 4C           				BYTE "L" ; 2A 
   502 00:002B: 2C           				BYTE "," ; 2B
   503 00:002C: 2E           				BYTE "." ; 2C
   504 00:002D: 3A           				BYTE ":" ; 2D
   505 00:002E: 40           				BYTE "@" ; 2E
   506 00:002F: 2D           				BYTE "-" ; 2F
   507                        	
   508 00:0030: 50           				BYTE "P" ; 30 Pound sign
   509 00:0031: 2A           				BYTE "*" ; 31
   510 00:0032: 3B           				BYTE $3B ; 32 Semicolon
   511 00:0033: 2F           				BYTE "/" ; 33
   512 00:0034: 3F           				BYTE "?" ; 34 Shift
   513 00:0035: 3D           				BYTE "=" ; 35
   514 00:0036: 55           				BYTE "U" ; 36 Up arrow
   515 00:0037: 3F           				BYTE "?" ; 37 CLR
   516                        				
   517 00:0038: 3F           				BYTE "?" ; 38 DEL
   518 00:0039: 3F           				BYTE "?" ; 39 Return
   519 00:003A: 3F           				BYTE "?" ; 3A Left Right
                     Arrow
   520 00:003B: 3F           				BYTE "?" ; 3B Up Down Ar
                    row
   521 00:003C: 31           				BYTE "1" ; 3C F1
   522 00:003D: 33           				BYTE "3" ; 3D F3 
   523 00:003E: 35           				BYTE "5" ; 3E F5
   524 00:003F: 37           				BYTE "7" ; 3F F7
   525                        	
   526                        String1
   527 00:0040: 57 36 35 43  				BYTE	"W65CSXB Keyboar
                    d, VGA and SID system...", $0C, $0D, $00 ; 1
       00:0044: 53 58 42 20 
       00:0048: 4B 65 79 62 
       00:004C: 6F 61 72 64 
  Mon Jan 25 2016 12:10                                                Page 14

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

       00:0050: 2C 20 56 47 
       00:0054: 41 20 61 6E 
       00:0058: 64 20 53 49 
       00:005C: 44 20 73 79 
       00:0060: 73 74 65 6D 
       00:0064: 2E 2E 2E 0C 
       00:0068: 0D 00 
   528                        			
   529 00:006A:              	ENDS
   530                        
   531                        ;-----------------------------
   532                        ;
   533                        ;		Reset and Interrupt Vectors (define for 
                    265, 816/02 are subsets)
   534                        ;
   535                        ;-----------------------------
   536                        
   537                        Shadow_VECTORS	SECTION OFFSET $7EE0
   538                        							
                    	;65C816 Interrupt Vectors
   539                        							
                    	;Status bit E = 0 (Native mode, 16 bit mode)
   540 00:7EE0: 37 03        				DW badVec		
                    ; $FFE0 - IRQRVD4(816)
   541 00:7EE2: 37 03        				DW badVec		
                    ; $FFE2 - IRQRVD5(816)
   542 00:7EE4: 37 03        				DW badVec		
                    ; $FFE4 - COP(816)
   543 00:7EE6: 37 03        				DW badVec		
                    ; $FFE6 - BRK(816)
   544 00:7EE8: 37 03        				DW badVec		
                    ; $FFE8 - ABORT(816)
   545 00:7EEA: 37 03        				DW badVec		
                    ; $FFEA - NMI(816)
   546 00:7EEC: 37 03        				DW badVec		
                    ; $FFEC - IRQRVD(816)
   547 00:7EEE: 37 03        				DW badVec		
                    ; $FFEE - IRQ(816)
   548                        							
                    	;Status bit E = 1 (Emulation mode, 8 bit mode)
   549 00:7EF0: 37 03        				DW badVec		
                    ; $FFF0 - IRQRVD2(8 bit Emulation)(IRQRVD(265))
   550 00:7EF2: 37 03        				DW badVec		
                    ; $FFF2 - IRQRVD1(8 bit Emulation)(IRQRVD(265))
   551 00:7EF4: 37 03        				DW badVec		
                    ; $FFF4 - COP(8 bit Emulation)
   552 00:7EF6: 37 03        				DW badVec   	; $FFF6 
                    - IRQRVD0(8 bit Emulation)(IRQRVD(265))
   553 00:7EF8: 37 03        				DW badVec		
                    ; $FFF8 - ABORT(8 bit Emulation)
   554                        							
                    	; Common 8 bit Vectors for all CPUs
   555 00:7EFA: 37 03        				DW badVec		
                    ; $FFFA -  NMIRQ (ALL)
   556 00:7EFC: 00 02        				DW START		
  Mon Jan 25 2016 12:10                                                Page 15

    "W65C816_Keyboard_VGA_SID W65C816_Keyboard_VGA_SID_01.asm"
    "W65C816_Keyboard_VGA_SID"

                    ; $FFFC -  RESET (ALL)
   557 00:7EFE: 34 03        				DW IRQHandler	; $FFFE 
                    -  IRQBRK (ALL)
   558 00:7F00:              	ENDS
   559                        
   560                        vectors	SECTION OFFSET $FFE0
   561                        							
                    	;65C816 Interrupt Vectors
   562                        							
                    	;Status bit E = 0 (Native mode, 16 bit mode)
   563 00:FFE0: 37 03        				DW badVec		
                    ; $FFE0 - IRQRVD4(816)
   564 00:FFE2: 37 03        				DW badVec		
                    ; $FFE2 - IRQRVD5(816)
   565 00:FFE4: 37 03        				DW badVec		
                    ; $FFE4 - COP(816)
   566 00:FFE6: 37 03        				DW badVec		
                    ; $FFE6 - BRK(816)
   567 00:FFE8: 37 03        				DW badVec		
                    ; $FFE8 - ABORT(816)
   568 00:FFEA: 37 03        				DW badVec		
                    ; $FFEA - NMI(816)
   569 00:FFEC: 37 03        				DW badVec		
                    ; $FFEC - IRQRVD(816)
   570 00:FFEE: 37 03        				DW badVec		
                    ; $FFEE - IRQ(816)
   571                        							
                    	;Status bit E = 1 (Emulation mode, 8 bit mode)
   572 00:FFF0: 37 03        				DW badVec		
                    ; $FFF0 - IRQRVD2(8 bit Emulation)(IRQRVD(265))
   573 00:FFF2: 37 03        				DW badVec		
                    ; $FFF2 - IRQRVD1(8 bit Emulation)(IRQRVD(265))
   574 00:FFF4: 37 03        				DW badVec		
                    ; $FFF4 - COP(8 bit Emulation)
   575 00:FFF6: 37 03        				DW badVec		
                    ; $FFF6 - IRQRVD0(8 bit Emulation)(IRQRVD(265))
   576 00:FFF8: 37 03        				DW badVec		
                    ; $FFF8 - ABORT(8 bit Emulation)
   577                        							
                    	; Common 8 bit Vectors for all CPUs
   578 00:FFFA: 37 03        				DW badVec		
                    ; $FFFA -  NMIRQ (ALL)
   579 00:FFFC: 00 02        				DW START		
                    ; $FFFC -  RESET (ALL)
   580 00:FFFE: 34 03        				DW IRQHandler	; $FFFE 
                    -  IRQBRK (ALL)
   581 01:0000:              	ENDS
   582                        	END


      Lines assembled: 582
      Errors: 0
